#/usr/bin/env python
'''
parse a MAVLink protocol XML file and generate a C implementation

Copyright Andrew Tridgell 2011
Copyright Pat Hickey 2013
Released under GNU GPL version 3 or later
'''

import sys, textwrap, os, time
import mavparse, mavtemplate

t = mavtemplate.MAVTemplate()

def message_imports(ms):
    imports = [ "import qualified SMACCMPilot.Mavlink.Native.Messages."
              + m.name_module + " as " + m.name_module for m in ms ]
    return ("\n").join(imports)

def generate_messages_hs(directory, ms):
    '''generate umbrella haskell SMACCMPilot.Mavlink.Native.Messages module'''
    messageLCs = ( "-- [(Message Id, (Message Length, Message CRC))]\n"
                 + "messageLensCRCs :: [(Word8, (Word8, Word8))]\n"
                 + "messageLensCRCs =\n"
                 + "  [ " + ("\n  , ").join(["(%3d, (%3d, %3d)) -- 0x%0.2X %s"
                                            % (m.id, m.wire_length, m.crc_extra,
                                                m.id, m.name)
                                            for m in ms])
                 + "\n  ]\n"
                 )

    message_datatype = ("\n  | ").join(["%s %s.%sMsg" 
                                      % (m.name_module, m.name_module, m.name_module)
                                      for m in ms])
    f = open(os.path.join(directory, 'Messages.hs'), mode='w')
    t.write(f, '''
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE Rank2Types #-}

{- Module automatically generated by smavgen_haskell.py -}

module SMACCMPilot.Mavlink.Native.Messages
  ( messageLensCRCs
  , Message(..)
  ) where

import Data.Word
${imports}

${messageLCs}

data Message
  = ${message_datatype}

''', { 'imports': message_imports(ms)
     , 'messageLCs': messageLCs
     , 'message_datatype': message_datatype
     })
    f.close()

def ivory_name(field , m):
    f = field.name.encode('ascii')
    # catch haskell reserved words
    if (f == "type" and m.name == "HEARTBEAT"):
        return "mavtype"
    if (f in ["type", "seq"]):
       return m.name.lower() + "_" + f
    else:
      return f

haskell_type = {
        'float'    : 'Float',
        'double'   : 'Double',
        'char'     : 'Word8',
        'int8_t'   : 'Int8',
        'uint8_t'  : 'Word8',
        'uint8_t_mavlink_version' : 'Word8',
        'int16_t'  : 'Int16',
        'uint16_t' : 'Word16',
        'int32_t'  : 'Int16',
        'uint32_t' : 'Word32',
        'int64_t'  : 'Int64',
        'uint64_t' : 'Word64'}

def haskell_type_full(s):
    el = haskell_type[s.type]
    if s.array_length == 0:
        return el
    return "Vector %d %s" % (s.array_length, el)

def generate_message_haskell(directory, m):
    '''generate haskell file containing datatype and cereal fns'''
    defs = [ ivory_name(s,m) + " :: " + haskell_type_full(s)
             for s in m.ordered_fields ]
    get_fields = [ ivory_name(s,m) + " <- get"
                   for s in m.ordered_fields ]
    put_fields = [ "put " + ivory_name(s,m)
                   for s in m.ordered_fields ]
    mdict = m.__dict__
    mdict.update({
      'datatype_fields': ("\n    , ").join(defs),
      'get_fields': ("\n  ").join(get_fields),
      'put_fields': ("\n  ").join(put_fields)
    })
    f = open(os.path.join(directory, 'Messages/%s.hs' % m.name_module), mode='w')
    t.write(f, '''
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_haskell.py

module SMACCMPilot.Mavlink.Native.Messages.${name_module} where

import Data.Word
import Data.Int
import Data.Sized.Matrix (Vector)
import Data.Serialize
import SMACCMPilot.Mavlink.Native.Serialize

${name_camel}MsgId :: Word8
${name_camel}MsgId = ${id}

${name_camel}CrcExtra :: Word8
${name_camel}CrcExtra = ${crc_extra}

data ${name_module}Msg =
  ${name_module}Msg
    { ${datatype_fields}
    }

get${name_module}Msg :: Get ${name_module}Msg
get${name_module}Msg = do
  ${get_fields}
  return ${name_module}Msg{..}

put${name_module}Msg :: ${name_module}Msg -> Put
put${name_module}Msg ${name_module}Msg{..} = do
  ${put_fields}

''', mdict)
    f.close()

class mav_include(object):
    def __init__(self, base):
        self.base = base

def process_xml_wtf(basename, xml):
    '''generate headers for one XML file'''

    directory = basename

    if xml.little_endian:
        xml.mavlink_endian = "MAVLINK_LITTLE_ENDIAN"
    else:
        xml.mavlink_endian = "MAVLINK_BIG_ENDIAN"

    if xml.crc_extra:
        xml.crc_extra_define = "1"
    else:
        xml.crc_extra_define = "0"

    if xml.sort_fields:
        xml.aligned_fields_define = "1"
    else:
        xml.aligned_fields_define = "0"

    # work out the included headers
    xml.include_list = []
    for i in xml.include:
        base = i[:-4]
        xml.include_list.append(mav_include(base))

    # form message lengths array
    xml.message_lengths_array = ''
    for mlen in xml.message_lengths:
        xml.message_lengths_array += '%u, ' % mlen
    xml.message_lengths_array = xml.message_lengths_array[:-2]

    # and message CRCs array
    xml.message_crcs_array = ''
    for crc in xml.message_crcs:
        xml.message_crcs_array += '%u, ' % crc
    xml.message_crcs_array = xml.message_crcs_array[:-2]

    # form message info array
    xml.message_info_array = ''
    for name in xml.message_names:
        if name is not None:
            xml.message_info_array += 'MAVLINK_MESSAGE_INFO_%s, ' % name
        else:
            # Several C compilers don't accept {NULL} for
            # multi-dimensional arrays and structs
            # feed the compiler a "filled" empty message
            xml.message_info_array += '{"EMPTY",0,{{"","",MAVLINK_TYPE_CHAR,0,0,0}}}, '
    xml.message_info_array = xml.message_info_array[:-2]

    # add some extra field attributes for convenience with arrays
    for m in xml.message:
        m.msg_name = m.name
        if xml.crc_extra:
            m.crc_extra_arg = ", %s" % m.crc_extra
        else:
            m.crc_extra_arg = ""
        for f in m.fields:
            if f.print_format is None:
                f.c_print_format = 'NULL'
            else:
                f.c_print_format = '"%s"' % f.print_format
            if f.array_length != 0:
                f.array_suffix = '[%u]' % f.array_length
                f.array_prefix = '*'
                f.array_tag = '_array'
                f.array_arg = ', %u' % f.array_length
                f.array_return_arg = '%s, %u, ' % (f.name, f.array_length)
                f.array_const = 'const '
                f.decode_left = ''
                f.decode_right = ', %s->%s' % (m.name_lower, f.name)
                f.return_type = 'uint16_t'
                f.get_arg = ', %s *%s' % (f.type, f.name)
                if f.type == 'char':
                    f.c_test_value = '"%s"' % f.test_value
                else:
                    test_strings = []
                    for v in f.test_value:           test_strings.append(str(v))
                    f.c_test_value = '{ %s }' % ', '.join(test_strings)
            else:
                f.array_suffix = ''
                f.array_prefix = ''
                f.array_tag = ''
                f.array_arg = ''
                f.array_return_arg = ''
                f.array_const = ''
                f.decode_left = "%s->%s = " % (m.name_lower, f.name)
                f.decode_right = ''
                f.get_arg = ''
                f.return_type = f.type
                if f.type == 'char':
                    f.c_test_value = "'%s'" % f.test_value
                elif f.type == 'uint64_t':
                    f.c_test_value = "%sULL" % f.test_value                    
                elif f.type == 'int64_t':
                    f.c_test_value = "%sLL" % f.test_value                    
                else:
                    f.c_test_value = f.test_value

def process_xml(basename, xml):
    # cope with uint8_t_mavlink_version
    for m in xml.message:
        m.arg_fields = []
        for f in m.fields:
            if not f.omit_arg:
                m.arg_fields.append(f)
                f.putname = f.name
            else:
                f.putname = f.const_value
    return xml

def generate_messages(basename, xml_list):
    messages = []
    print("Generating SMACCMPilot.Mavlink.Native.Messages modules in directory %s" %
          basename)
    mavparse.mkdir_p(basename)

    for xml in xml_list:
        process_xml(basename, xml);
        for m in xml.message:
            generate_message_haskell(basename, m)
            messages.append(m)

    generate_messages_hs(basename, messages)

