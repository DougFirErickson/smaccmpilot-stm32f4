{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.GpsGlobalOrigin where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

gpsGlobalOriginMsgId :: Uint8
gpsGlobalOriginMsgId = 49

gpsGlobalOriginCrcExtra :: Uint8
gpsGlobalOriginCrcExtra = 39

gpsGlobalOriginModule :: Module
gpsGlobalOriginModule = package "mavlink_gps_global_origin_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkGpsGlobalOriginSender
  incl gpsGlobalOriginUnpack
  defStruct (Proxy :: Proxy "gps_global_origin_msg")
  incl gpsGlobalOriginPackRef
  incl gpsGlobalOriginUnpackRef

[ivory|
struct gps_global_origin_msg
  { latitude :: Stored Sint32
  ; longitude :: Stored Sint32
  ; altitude :: Stored Sint32
  }
|]

mkGpsGlobalOriginSender ::
  Def ('[ ConstRef s0 (Struct "gps_global_origin_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkGpsGlobalOriginSender = makeMavlinkSender "gps_global_origin_msg" gpsGlobalOriginMsgId gpsGlobalOriginCrcExtra

instance MavlinkUnpackableMsg "gps_global_origin_msg" where
    unpackMsg = ( gpsGlobalOriginUnpack , gpsGlobalOriginMsgId )

gpsGlobalOriginUnpack :: Def ('[ Ref s1 (Struct "gps_global_origin_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
gpsGlobalOriginUnpack = proc "mavlink_gps_global_origin_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

gpsGlobalOriginPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "gps_global_origin_msg")
                              ] :-> () )
gpsGlobalOriginPackRef = proc "mavlink_gps_global_origin_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> latitude)
  packRef buf (off + 4) (msg ~> longitude)
  packRef buf (off + 8) (msg ~> altitude)

gpsGlobalOriginUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "gps_global_origin_msg")
                                ] :-> () )
gpsGlobalOriginUnpackRef = proc "mavlink_gps_global_origin_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> latitude)
  unpackRef buf (off + 4) (msg ~> longitude)
  unpackRef buf (off + 8) (msg ~> altitude)

instance SerializableRef (Struct "gps_global_origin_msg") where
  packRef = call_ gpsGlobalOriginPackRef
  unpackRef = call_ gpsGlobalOriginUnpackRef
