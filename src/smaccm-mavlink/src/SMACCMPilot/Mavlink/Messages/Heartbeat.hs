{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Heartbeat where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

heartbeatMsgId :: Uint8
heartbeatMsgId = 0

heartbeatCrcExtra :: Uint8
heartbeatCrcExtra = 50

heartbeatModule :: Module
heartbeatModule = package "mavlink_heartbeat_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkHeartbeatSender
  incl heartbeatUnpack
  defStruct (Proxy :: Proxy "heartbeat_msg")
  incl heartbeatPackRef
  incl heartbeatUnpackRef

[ivory|
struct heartbeat_msg
  { custom_mode :: Stored Uint32
  ; mavtype :: Stored Uint8
  ; autopilot :: Stored Uint8
  ; base_mode :: Stored Uint8
  ; system_status :: Stored Uint8
  ; mavlink_version :: Stored Uint8
  }
|]

mkHeartbeatSender ::
  Def ('[ ConstRef s0 (Struct "heartbeat_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkHeartbeatSender = makeMavlinkSender "heartbeat_msg" heartbeatMsgId heartbeatCrcExtra

instance MavlinkUnpackableMsg "heartbeat_msg" where
    unpackMsg = ( heartbeatUnpack , heartbeatMsgId )

heartbeatUnpack :: Def ('[ Ref s1 (Struct "heartbeat_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
heartbeatUnpack = proc "mavlink_heartbeat_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

heartbeatPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "heartbeat_msg")
                              ] :-> () )
heartbeatPackRef = proc "mavlink_heartbeat_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> custom_mode)
  packRef buf (off + 4) (msg ~> mavtype)
  packRef buf (off + 5) (msg ~> autopilot)
  packRef buf (off + 6) (msg ~> base_mode)
  packRef buf (off + 7) (msg ~> system_status)
  packRef buf (off + 8) (msg ~> mavlink_version)

heartbeatUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "heartbeat_msg")
                                ] :-> () )
heartbeatUnpackRef = proc "mavlink_heartbeat_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> custom_mode)
  unpackRef buf (off + 4) (msg ~> mavtype)
  unpackRef buf (off + 5) (msg ~> autopilot)
  unpackRef buf (off + 6) (msg ~> base_mode)
  unpackRef buf (off + 7) (msg ~> system_status)
  unpackRef buf (off + 8) (msg ~> mavlink_version)

instance SerializableRef (Struct "heartbeat_msg") where
  packRef = call_ heartbeatPackRef
  unpackRef = call_ heartbeatUnpackRef
