{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.BatteryStatus where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

batteryStatusMsgId :: Uint8
batteryStatusMsgId = 147

batteryStatusCrcExtra :: Uint8
batteryStatusCrcExtra = 42

batteryStatusModule :: Module
batteryStatusModule = package "mavlink_battery_status_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkBatteryStatusSender
  incl batteryStatusUnpack
  defStruct (Proxy :: Proxy "battery_status_msg")
  incl batteryStatusPackRef
  incl batteryStatusUnpackRef

[ivory|
struct battery_status_msg
  { voltage_cell_1 :: Stored Uint16
  ; voltage_cell_2 :: Stored Uint16
  ; voltage_cell_3 :: Stored Uint16
  ; voltage_cell_4 :: Stored Uint16
  ; voltage_cell_5 :: Stored Uint16
  ; voltage_cell_6 :: Stored Uint16
  ; current_battery :: Stored Sint16
  ; accu_id :: Stored Uint8
  ; battery_remaining :: Stored Sint8
  }
|]

mkBatteryStatusSender ::
  Def ('[ ConstRef s0 (Struct "battery_status_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkBatteryStatusSender = makeMavlinkSender "battery_status_msg" batteryStatusMsgId batteryStatusCrcExtra

instance MavlinkUnpackableMsg "battery_status_msg" where
    unpackMsg = ( batteryStatusUnpack , batteryStatusMsgId )

batteryStatusUnpack :: Def ('[ Ref s1 (Struct "battery_status_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
batteryStatusUnpack = proc "mavlink_battery_status_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

batteryStatusPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "battery_status_msg")
                              ] :-> () )
batteryStatusPackRef = proc "mavlink_battery_status_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> voltage_cell_1)
  packRef buf (off + 2) (msg ~> voltage_cell_2)
  packRef buf (off + 4) (msg ~> voltage_cell_3)
  packRef buf (off + 6) (msg ~> voltage_cell_4)
  packRef buf (off + 8) (msg ~> voltage_cell_5)
  packRef buf (off + 10) (msg ~> voltage_cell_6)
  packRef buf (off + 12) (msg ~> current_battery)
  packRef buf (off + 14) (msg ~> accu_id)
  packRef buf (off + 15) (msg ~> battery_remaining)

batteryStatusUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "battery_status_msg")
                                ] :-> () )
batteryStatusUnpackRef = proc "mavlink_battery_status_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> voltage_cell_1)
  unpackRef buf (off + 2) (msg ~> voltage_cell_2)
  unpackRef buf (off + 4) (msg ~> voltage_cell_3)
  unpackRef buf (off + 6) (msg ~> voltage_cell_4)
  unpackRef buf (off + 8) (msg ~> voltage_cell_5)
  unpackRef buf (off + 10) (msg ~> voltage_cell_6)
  unpackRef buf (off + 12) (msg ~> current_battery)
  unpackRef buf (off + 14) (msg ~> accu_id)
  unpackRef buf (off + 15) (msg ~> battery_remaining)

instance SerializableRef (Struct "battery_status_msg") where
  packRef = call_ batteryStatusPackRef
  unpackRef = call_ batteryStatusUnpackRef
