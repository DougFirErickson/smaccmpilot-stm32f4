{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.VehCommsec where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

vehCommsecMsgId :: Uint8
vehCommsecMsgId = 185

vehCommsecCrcExtra :: Uint8
vehCommsecCrcExtra = 112

vehCommsecModule :: Module
vehCommsecModule = package "mavlink_veh_commsec_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkVehCommsecSender
  incl vehCommsecUnpack
  defStruct (Proxy :: Proxy "veh_commsec_msg")
  incl vehCommsecPackRef
  incl vehCommsecUnpackRef

[ivory|
struct veh_commsec_msg
  { time :: Stored Uint32
  ; good_msgs :: Stored Uint32
  ; bad_msgs :: Stored Uint32
  ; commsec_err :: Stored Uint8
  }
|]

mkVehCommsecSender ::
  Def ('[ ConstRef s0 (Struct "veh_commsec_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkVehCommsecSender = makeMavlinkSender "veh_commsec_msg" vehCommsecMsgId vehCommsecCrcExtra

instance MavlinkUnpackableMsg "veh_commsec_msg" where
    unpackMsg = ( vehCommsecUnpack , vehCommsecMsgId )

vehCommsecUnpack :: Def ('[ Ref s1 (Struct "veh_commsec_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
vehCommsecUnpack = proc "mavlink_veh_commsec_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

vehCommsecPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "veh_commsec_msg")
                              ] :-> () )
vehCommsecPackRef = proc "mavlink_veh_commsec_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time)
  packRef buf (off + 4) (msg ~> good_msgs)
  packRef buf (off + 8) (msg ~> bad_msgs)
  packRef buf (off + 12) (msg ~> commsec_err)

vehCommsecUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "veh_commsec_msg")
                                ] :-> () )
vehCommsecUnpackRef = proc "mavlink_veh_commsec_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time)
  unpackRef buf (off + 4) (msg ~> good_msgs)
  unpackRef buf (off + 8) (msg ~> bad_msgs)
  unpackRef buf (off + 12) (msg ~> commsec_err)

instance SerializableRef (Struct "veh_commsec_msg") where
  packRef = call_ vehCommsecPackRef
  unpackRef = call_ vehCommsecUnpackRef
