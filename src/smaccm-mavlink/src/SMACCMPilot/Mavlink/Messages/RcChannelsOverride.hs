{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RcChannelsOverride where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

rcChannelsOverrideMsgId :: Uint8
rcChannelsOverrideMsgId = 70

rcChannelsOverrideCrcExtra :: Uint8
rcChannelsOverrideCrcExtra = 124

rcChannelsOverrideModule :: Module
rcChannelsOverrideModule = package "mavlink_rc_channels_override_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRcChannelsOverrideSender
  incl rcChannelsOverrideUnpack
  defStruct (Proxy :: Proxy "rc_channels_override_msg")
  incl rcChannelsOverridePackRef
  incl rcChannelsOverrideUnpackRef

[ivory|
struct rc_channels_override_msg
  { chan1_raw :: Stored Uint16
  ; chan2_raw :: Stored Uint16
  ; chan3_raw :: Stored Uint16
  ; chan4_raw :: Stored Uint16
  ; chan5_raw :: Stored Uint16
  ; chan6_raw :: Stored Uint16
  ; chan7_raw :: Stored Uint16
  ; chan8_raw :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkRcChannelsOverrideSender ::
  Def ('[ ConstRef s0 (Struct "rc_channels_override_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRcChannelsOverrideSender = makeMavlinkSender "rc_channels_override_msg" rcChannelsOverrideMsgId rcChannelsOverrideCrcExtra

instance MavlinkUnpackableMsg "rc_channels_override_msg" where
    unpackMsg = ( rcChannelsOverrideUnpack , rcChannelsOverrideMsgId )

rcChannelsOverrideUnpack :: Def ('[ Ref s1 (Struct "rc_channels_override_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rcChannelsOverrideUnpack = proc "mavlink_rc_channels_override_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

rcChannelsOverridePackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "rc_channels_override_msg")
                              ] :-> () )
rcChannelsOverridePackRef = proc "mavlink_rc_channels_override_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> chan1_raw)
  packRef buf (off + 2) (msg ~> chan2_raw)
  packRef buf (off + 4) (msg ~> chan3_raw)
  packRef buf (off + 6) (msg ~> chan4_raw)
  packRef buf (off + 8) (msg ~> chan5_raw)
  packRef buf (off + 10) (msg ~> chan6_raw)
  packRef buf (off + 12) (msg ~> chan7_raw)
  packRef buf (off + 14) (msg ~> chan8_raw)
  packRef buf (off + 16) (msg ~> target_system)
  packRef buf (off + 17) (msg ~> target_component)

rcChannelsOverrideUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "rc_channels_override_msg")
                                ] :-> () )
rcChannelsOverrideUnpackRef = proc "mavlink_rc_channels_override_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> chan1_raw)
  unpackRef buf (off + 2) (msg ~> chan2_raw)
  unpackRef buf (off + 4) (msg ~> chan3_raw)
  unpackRef buf (off + 6) (msg ~> chan4_raw)
  unpackRef buf (off + 8) (msg ~> chan5_raw)
  unpackRef buf (off + 10) (msg ~> chan6_raw)
  unpackRef buf (off + 12) (msg ~> chan7_raw)
  unpackRef buf (off + 14) (msg ~> chan8_raw)
  unpackRef buf (off + 16) (msg ~> target_system)
  unpackRef buf (off + 17) (msg ~> target_component)

instance SerializableRef (Struct "rc_channels_override_msg") where
  packRef = call_ rcChannelsOverridePackRef
  unpackRef = call_ rcChannelsOverrideUnpackRef
