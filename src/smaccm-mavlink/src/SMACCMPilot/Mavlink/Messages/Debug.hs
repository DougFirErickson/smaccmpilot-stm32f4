{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Debug where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

debugMsgId :: Uint8
debugMsgId = 254

debugCrcExtra :: Uint8
debugCrcExtra = 46

debugModule :: Module
debugModule = package "mavlink_debug_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkDebugSender
  incl debugUnpack
  defStruct (Proxy :: Proxy "debug_msg")
  incl debugPackRef
  incl debugUnpackRef

[ivory|
struct debug_msg
  { time_boot_ms :: Stored Uint32
  ; value :: Stored IFloat
  ; ind :: Stored Uint8
  }
|]

mkDebugSender ::
  Def ('[ ConstRef s0 (Struct "debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkDebugSender = makeMavlinkSender "debug_msg" debugMsgId debugCrcExtra

instance MavlinkUnpackableMsg "debug_msg" where
    unpackMsg = ( debugUnpack , debugMsgId )

debugUnpack :: Def ('[ Ref s1 (Struct "debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
debugUnpack = proc "mavlink_debug_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

debugPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "debug_msg")
                              ] :-> () )
debugPackRef = proc "mavlink_debug_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> value)
  packRef buf (off + 8) (msg ~> ind)

debugUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "debug_msg")
                                ] :-> () )
debugUnpackRef = proc "mavlink_debug_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> value)
  unpackRef buf (off + 8) (msg ~> ind)

instance SerializableRef (Struct "debug_msg") where
  packRef = call_ debugPackRef
  unpackRef = call_ debugUnpackRef
