{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetLocalPositionSetpoint where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

setLocalPositionSetpointMsgId :: Uint8
setLocalPositionSetpointMsgId = 50

setLocalPositionSetpointCrcExtra :: Uint8
setLocalPositionSetpointCrcExtra = 214

setLocalPositionSetpointModule :: Module
setLocalPositionSetpointModule = package "mavlink_set_local_position_setpoint_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSetLocalPositionSetpointSender
  incl setLocalPositionSetpointUnpack
  defStruct (Proxy :: Proxy "set_local_position_setpoint_msg")
  incl setLocalPositionSetpointPackRef
  incl setLocalPositionSetpointUnpackRef

[ivory|
struct set_local_position_setpoint_msg
  { x :: Stored IFloat
  ; y :: Stored IFloat
  ; z :: Stored IFloat
  ; yaw :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; coordinate_frame :: Stored Uint8
  }
|]

mkSetLocalPositionSetpointSender ::
  Def ('[ ConstRef s0 (Struct "set_local_position_setpoint_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetLocalPositionSetpointSender = makeMavlinkSender "set_local_position_setpoint_msg" setLocalPositionSetpointMsgId setLocalPositionSetpointCrcExtra

instance MavlinkUnpackableMsg "set_local_position_setpoint_msg" where
    unpackMsg = ( setLocalPositionSetpointUnpack , setLocalPositionSetpointMsgId )

setLocalPositionSetpointUnpack :: Def ('[ Ref s1 (Struct "set_local_position_setpoint_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setLocalPositionSetpointUnpack = proc "mavlink_set_local_position_setpoint_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

setLocalPositionSetpointPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "set_local_position_setpoint_msg")
                              ] :-> () )
setLocalPositionSetpointPackRef = proc "mavlink_set_local_position_setpoint_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> x)
  packRef buf (off + 4) (msg ~> y)
  packRef buf (off + 8) (msg ~> z)
  packRef buf (off + 12) (msg ~> yaw)
  packRef buf (off + 16) (msg ~> target_system)
  packRef buf (off + 17) (msg ~> target_component)
  packRef buf (off + 18) (msg ~> coordinate_frame)

setLocalPositionSetpointUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "set_local_position_setpoint_msg")
                                ] :-> () )
setLocalPositionSetpointUnpackRef = proc "mavlink_set_local_position_setpoint_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> x)
  unpackRef buf (off + 4) (msg ~> y)
  unpackRef buf (off + 8) (msg ~> z)
  unpackRef buf (off + 12) (msg ~> yaw)
  unpackRef buf (off + 16) (msg ~> target_system)
  unpackRef buf (off + 17) (msg ~> target_component)
  unpackRef buf (off + 18) (msg ~> coordinate_frame)

instance SerializableRef (Struct "set_local_position_setpoint_msg") where
  packRef = call_ setLocalPositionSetpointPackRef
  unpackRef = call_ setLocalPositionSetpointUnpackRef
