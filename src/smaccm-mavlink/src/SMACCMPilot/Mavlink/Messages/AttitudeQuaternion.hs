{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AttitudeQuaternion where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

attitudeQuaternionMsgId :: Uint8
attitudeQuaternionMsgId = 31

attitudeQuaternionCrcExtra :: Uint8
attitudeQuaternionCrcExtra = 246

attitudeQuaternionModule :: Module
attitudeQuaternionModule = package "mavlink_attitude_quaternion_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkAttitudeQuaternionSender
  incl attitudeQuaternionUnpack
  defStruct (Proxy :: Proxy "attitude_quaternion_msg")
  incl attitudeQuaternionPackRef
  incl attitudeQuaternionUnpackRef

[ivory|
struct attitude_quaternion_msg
  { time_boot_ms :: Stored Uint32
  ; q1 :: Stored IFloat
  ; q2 :: Stored IFloat
  ; q3 :: Stored IFloat
  ; q4 :: Stored IFloat
  ; rollspeed :: Stored IFloat
  ; pitchspeed :: Stored IFloat
  ; yawspeed :: Stored IFloat
  }
|]

mkAttitudeQuaternionSender ::
  Def ('[ ConstRef s0 (Struct "attitude_quaternion_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAttitudeQuaternionSender = makeMavlinkSender "attitude_quaternion_msg" attitudeQuaternionMsgId attitudeQuaternionCrcExtra

instance MavlinkUnpackableMsg "attitude_quaternion_msg" where
    unpackMsg = ( attitudeQuaternionUnpack , attitudeQuaternionMsgId )

attitudeQuaternionUnpack :: Def ('[ Ref s1 (Struct "attitude_quaternion_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
attitudeQuaternionUnpack = proc "mavlink_attitude_quaternion_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

attitudeQuaternionPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "attitude_quaternion_msg")
                              ] :-> () )
attitudeQuaternionPackRef = proc "mavlink_attitude_quaternion_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> q1)
  packRef buf (off + 8) (msg ~> q2)
  packRef buf (off + 12) (msg ~> q3)
  packRef buf (off + 16) (msg ~> q4)
  packRef buf (off + 20) (msg ~> rollspeed)
  packRef buf (off + 24) (msg ~> pitchspeed)
  packRef buf (off + 28) (msg ~> yawspeed)

attitudeQuaternionUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "attitude_quaternion_msg")
                                ] :-> () )
attitudeQuaternionUnpackRef = proc "mavlink_attitude_quaternion_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> q1)
  unpackRef buf (off + 8) (msg ~> q2)
  unpackRef buf (off + 12) (msg ~> q3)
  unpackRef buf (off + 16) (msg ~> q4)
  unpackRef buf (off + 20) (msg ~> rollspeed)
  unpackRef buf (off + 24) (msg ~> pitchspeed)
  unpackRef buf (off + 28) (msg ~> yawspeed)

instance SerializableRef (Struct "attitude_quaternion_msg") where
  packRef = call_ attitudeQuaternionPackRef
  unpackRef = call_ attitudeQuaternionUnpackRef
