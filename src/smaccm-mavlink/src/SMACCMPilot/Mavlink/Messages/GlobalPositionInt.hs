{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.GlobalPositionInt where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

globalPositionIntMsgId :: Uint8
globalPositionIntMsgId = 33

globalPositionIntCrcExtra :: Uint8
globalPositionIntCrcExtra = 104

globalPositionIntModule :: Module
globalPositionIntModule = package "mavlink_global_position_int_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkGlobalPositionIntSender
  incl globalPositionIntUnpack
  defStruct (Proxy :: Proxy "global_position_int_msg")
  incl globalPositionIntPackRef
  incl globalPositionIntUnpackRef

[ivory|
struct global_position_int_msg
  { time_boot_ms :: Stored Uint32
  ; lat :: Stored Sint32
  ; lon :: Stored Sint32
  ; alt :: Stored Sint32
  ; relative_alt :: Stored Sint32
  ; vx :: Stored Sint16
  ; vy :: Stored Sint16
  ; vz :: Stored Sint16
  ; hdg :: Stored Uint16
  }
|]

mkGlobalPositionIntSender ::
  Def ('[ ConstRef s0 (Struct "global_position_int_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkGlobalPositionIntSender = makeMavlinkSender "global_position_int_msg" globalPositionIntMsgId globalPositionIntCrcExtra

instance MavlinkUnpackableMsg "global_position_int_msg" where
    unpackMsg = ( globalPositionIntUnpack , globalPositionIntMsgId )

globalPositionIntUnpack :: Def ('[ Ref s1 (Struct "global_position_int_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
globalPositionIntUnpack = proc "mavlink_global_position_int_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

globalPositionIntPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "global_position_int_msg")
                              ] :-> () )
globalPositionIntPackRef = proc "mavlink_global_position_int_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> lat)
  packRef buf (off + 8) (msg ~> lon)
  packRef buf (off + 12) (msg ~> alt)
  packRef buf (off + 16) (msg ~> relative_alt)
  packRef buf (off + 20) (msg ~> vx)
  packRef buf (off + 22) (msg ~> vy)
  packRef buf (off + 24) (msg ~> vz)
  packRef buf (off + 26) (msg ~> hdg)

globalPositionIntUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "global_position_int_msg")
                                ] :-> () )
globalPositionIntUnpackRef = proc "mavlink_global_position_int_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> lat)
  unpackRef buf (off + 8) (msg ~> lon)
  unpackRef buf (off + 12) (msg ~> alt)
  unpackRef buf (off + 16) (msg ~> relative_alt)
  unpackRef buf (off + 20) (msg ~> vx)
  unpackRef buf (off + 22) (msg ~> vy)
  unpackRef buf (off + 24) (msg ~> vz)
  unpackRef buf (off + 26) (msg ~> hdg)

instance SerializableRef (Struct "global_position_int_msg") where
  packRef = call_ globalPositionIntPackRef
  unpackRef = call_ globalPositionIntUnpackRef
