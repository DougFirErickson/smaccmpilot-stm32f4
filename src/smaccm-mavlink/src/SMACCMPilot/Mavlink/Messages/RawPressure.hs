{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RawPressure where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

rawPressureMsgId :: Uint8
rawPressureMsgId = 28

rawPressureCrcExtra :: Uint8
rawPressureCrcExtra = 67

rawPressureModule :: Module
rawPressureModule = package "mavlink_raw_pressure_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRawPressureSender
  incl rawPressureUnpack
  defStruct (Proxy :: Proxy "raw_pressure_msg")
  wrappedPackMod rawPressureWrapper

[ivory|
struct raw_pressure_msg
  { time_usec :: Stored Uint64
  ; press_abs :: Stored Sint16
  ; press_diff1 :: Stored Sint16
  ; press_diff2 :: Stored Sint16
  ; temperature :: Stored Sint16
  }
|]

mkRawPressureSender ::
  Def ('[ ConstRef s0 (Struct "raw_pressure_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRawPressureSender = makeMavlinkSender "raw_pressure_msg" rawPressureMsgId rawPressureCrcExtra

instance MavlinkUnpackableMsg "raw_pressure_msg" where
    unpackMsg = ( rawPressureUnpack , rawPressureMsgId )

rawPressureUnpack :: Def ('[ Ref s1 (Struct "raw_pressure_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rawPressureUnpack = proc "mavlink_raw_pressure_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

rawPressureWrapper :: WrappedPackRep (Struct "raw_pressure_msg")
rawPressureWrapper = wrapPackRep "mavlink_raw_pressure" $ packStruct
  [ packLabel time_usec
  , packLabel press_abs
  , packLabel press_diff1
  , packLabel press_diff2
  , packLabel temperature
  ]

instance Packable (Struct "raw_pressure_msg") where
  packRep = wrappedPackRep rawPressureWrapper
