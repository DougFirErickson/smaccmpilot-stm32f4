{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RawPressure where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

rawPressureMsgId :: Uint8
rawPressureMsgId = 28

rawPressureCrcExtra :: Uint8
rawPressureCrcExtra = 67

rawPressureModule :: Module
rawPressureModule = package "mavlink_raw_pressure_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRawPressureSender
  incl rawPressureUnpack
  defStruct (Proxy :: Proxy "raw_pressure_msg")
  incl rawPressurePackRef
  incl rawPressureUnpackRef

[ivory|
struct raw_pressure_msg
  { time_usec :: Stored Uint64
  ; press_abs :: Stored Sint16
  ; press_diff1 :: Stored Sint16
  ; press_diff2 :: Stored Sint16
  ; temperature :: Stored Sint16
  }
|]

mkRawPressureSender ::
  Def ('[ ConstRef s0 (Struct "raw_pressure_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRawPressureSender = makeMavlinkSender "raw_pressure_msg" rawPressureMsgId rawPressureCrcExtra

instance MavlinkUnpackableMsg "raw_pressure_msg" where
    unpackMsg = ( rawPressureUnpack , rawPressureMsgId )

rawPressureUnpack :: Def ('[ Ref s1 (Struct "raw_pressure_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rawPressureUnpack = proc "mavlink_raw_pressure_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

rawPressurePackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "raw_pressure_msg")
                              ] :-> () )
rawPressurePackRef = proc "mavlink_raw_pressure_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_usec)
  packRef buf (off + 8) (msg ~> press_abs)
  packRef buf (off + 10) (msg ~> press_diff1)
  packRef buf (off + 12) (msg ~> press_diff2)
  packRef buf (off + 14) (msg ~> temperature)

rawPressureUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "raw_pressure_msg")
                                ] :-> () )
rawPressureUnpackRef = proc "mavlink_raw_pressure_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_usec)
  unpackRef buf (off + 8) (msg ~> press_abs)
  unpackRef buf (off + 10) (msg ~> press_diff1)
  unpackRef buf (off + 12) (msg ~> press_diff2)
  unpackRef buf (off + 14) (msg ~> temperature)

instance SerializableRef (Struct "raw_pressure_msg") where
  packRef = call_ rawPressurePackRef
  unpackRef = call_ rawPressureUnpackRef
