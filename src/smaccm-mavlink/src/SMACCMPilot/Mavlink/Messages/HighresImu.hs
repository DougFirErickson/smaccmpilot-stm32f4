{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.HighresImu where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

highresImuMsgId :: Uint8
highresImuMsgId = 105

highresImuCrcExtra :: Uint8
highresImuCrcExtra = 93

highresImuModule :: Module
highresImuModule = package "mavlink_highres_imu_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkHighresImuSender
  incl highresImuUnpack
  defStruct (Proxy :: Proxy "highres_imu_msg")
  incl highresImuPackRef
  incl highresImuUnpackRef

[ivory|
struct highres_imu_msg
  { time_usec :: Stored Uint64
  ; xacc :: Stored IFloat
  ; yacc :: Stored IFloat
  ; zacc :: Stored IFloat
  ; xgyro :: Stored IFloat
  ; ygyro :: Stored IFloat
  ; zgyro :: Stored IFloat
  ; xmag :: Stored IFloat
  ; ymag :: Stored IFloat
  ; zmag :: Stored IFloat
  ; abs_pressure :: Stored IFloat
  ; diff_pressure :: Stored IFloat
  ; pressure_alt :: Stored IFloat
  ; temperature :: Stored IFloat
  ; fields_updated :: Stored Uint16
  }
|]

mkHighresImuSender ::
  Def ('[ ConstRef s0 (Struct "highres_imu_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkHighresImuSender = makeMavlinkSender "highres_imu_msg" highresImuMsgId highresImuCrcExtra

instance MavlinkUnpackableMsg "highres_imu_msg" where
    unpackMsg = ( highresImuUnpack , highresImuMsgId )

highresImuUnpack :: Def ('[ Ref s1 (Struct "highres_imu_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
highresImuUnpack = proc "mavlink_highres_imu_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

highresImuPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "highres_imu_msg")
                              ] :-> () )
highresImuPackRef = proc "mavlink_highres_imu_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_usec)
  packRef buf (off + 8) (msg ~> xacc)
  packRef buf (off + 12) (msg ~> yacc)
  packRef buf (off + 16) (msg ~> zacc)
  packRef buf (off + 20) (msg ~> xgyro)
  packRef buf (off + 24) (msg ~> ygyro)
  packRef buf (off + 28) (msg ~> zgyro)
  packRef buf (off + 32) (msg ~> xmag)
  packRef buf (off + 36) (msg ~> ymag)
  packRef buf (off + 40) (msg ~> zmag)
  packRef buf (off + 44) (msg ~> abs_pressure)
  packRef buf (off + 48) (msg ~> diff_pressure)
  packRef buf (off + 52) (msg ~> pressure_alt)
  packRef buf (off + 56) (msg ~> temperature)
  packRef buf (off + 60) (msg ~> fields_updated)

highresImuUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "highres_imu_msg")
                                ] :-> () )
highresImuUnpackRef = proc "mavlink_highres_imu_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_usec)
  unpackRef buf (off + 8) (msg ~> xacc)
  unpackRef buf (off + 12) (msg ~> yacc)
  unpackRef buf (off + 16) (msg ~> zacc)
  unpackRef buf (off + 20) (msg ~> xgyro)
  unpackRef buf (off + 24) (msg ~> ygyro)
  unpackRef buf (off + 28) (msg ~> zgyro)
  unpackRef buf (off + 32) (msg ~> xmag)
  unpackRef buf (off + 36) (msg ~> ymag)
  unpackRef buf (off + 40) (msg ~> zmag)
  unpackRef buf (off + 44) (msg ~> abs_pressure)
  unpackRef buf (off + 48) (msg ~> diff_pressure)
  unpackRef buf (off + 52) (msg ~> pressure_alt)
  unpackRef buf (off + 56) (msg ~> temperature)
  unpackRef buf (off + 60) (msg ~> fields_updated)

instance SerializableRef (Struct "highres_imu_msg") where
  packRef = call_ highresImuPackRef
  unpackRef = call_ highresImuUnpackRef
