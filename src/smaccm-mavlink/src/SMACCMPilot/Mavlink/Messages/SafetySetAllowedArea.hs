{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SafetySetAllowedArea where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

safetySetAllowedAreaMsgId :: Uint8
safetySetAllowedAreaMsgId = 54

safetySetAllowedAreaCrcExtra :: Uint8
safetySetAllowedAreaCrcExtra = 15

safetySetAllowedAreaModule :: Module
safetySetAllowedAreaModule = package "mavlink_safety_set_allowed_area_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSafetySetAllowedAreaSender
  incl safetySetAllowedAreaUnpack
  defStruct (Proxy :: Proxy "safety_set_allowed_area_msg")
  incl safetySetAllowedAreaPackRef
  incl safetySetAllowedAreaUnpackRef

[ivory|
struct safety_set_allowed_area_msg
  { p1x :: Stored IFloat
  ; p1y :: Stored IFloat
  ; p1z :: Stored IFloat
  ; p2x :: Stored IFloat
  ; p2y :: Stored IFloat
  ; p2z :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; frame :: Stored Uint8
  }
|]

mkSafetySetAllowedAreaSender ::
  Def ('[ ConstRef s0 (Struct "safety_set_allowed_area_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSafetySetAllowedAreaSender = makeMavlinkSender "safety_set_allowed_area_msg" safetySetAllowedAreaMsgId safetySetAllowedAreaCrcExtra

instance MavlinkUnpackableMsg "safety_set_allowed_area_msg" where
    unpackMsg = ( safetySetAllowedAreaUnpack , safetySetAllowedAreaMsgId )

safetySetAllowedAreaUnpack :: Def ('[ Ref s1 (Struct "safety_set_allowed_area_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
safetySetAllowedAreaUnpack = proc "mavlink_safety_set_allowed_area_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

safetySetAllowedAreaPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "safety_set_allowed_area_msg")
                              ] :-> () )
safetySetAllowedAreaPackRef = proc "mavlink_safety_set_allowed_area_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> p1x)
  packRef buf (off + 4) (msg ~> p1y)
  packRef buf (off + 8) (msg ~> p1z)
  packRef buf (off + 12) (msg ~> p2x)
  packRef buf (off + 16) (msg ~> p2y)
  packRef buf (off + 20) (msg ~> p2z)
  packRef buf (off + 24) (msg ~> target_system)
  packRef buf (off + 25) (msg ~> target_component)
  packRef buf (off + 26) (msg ~> frame)

safetySetAllowedAreaUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "safety_set_allowed_area_msg")
                                ] :-> () )
safetySetAllowedAreaUnpackRef = proc "mavlink_safety_set_allowed_area_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> p1x)
  unpackRef buf (off + 4) (msg ~> p1y)
  unpackRef buf (off + 8) (msg ~> p1z)
  unpackRef buf (off + 12) (msg ~> p2x)
  unpackRef buf (off + 16) (msg ~> p2y)
  unpackRef buf (off + 20) (msg ~> p2z)
  unpackRef buf (off + 24) (msg ~> target_system)
  unpackRef buf (off + 25) (msg ~> target_component)
  unpackRef buf (off + 26) (msg ~> frame)

instance SerializableRef (Struct "safety_set_allowed_area_msg") where
  packRef = call_ safetySetAllowedAreaPackRef
  unpackRef = call_ safetySetAllowedAreaUnpackRef
