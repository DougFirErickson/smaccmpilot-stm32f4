{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.GcsRadio where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

gcsRadioMsgId :: Uint8
gcsRadioMsgId = 175

gcsRadioCrcExtra :: Uint8
gcsRadioCrcExtra = 108

gcsRadioModule :: Module
gcsRadioModule = package "mavlink_gcs_radio_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkGcsRadioSender
  incl gcsRadioUnpack
  defStruct (Proxy :: Proxy "gcs_radio_msg")
  incl gcsRadioPackRef
  incl gcsRadioUnpackRef

[ivory|
struct gcs_radio_msg
  { rxerrors :: Stored Uint16
  ; fixed :: Stored Uint16
  ; rssi :: Stored Uint8
  ; remrssi :: Stored Uint8
  ; txbuf :: Stored Uint8
  ; noise :: Stored Uint8
  ; remnoise :: Stored Uint8
  }
|]

mkGcsRadioSender ::
  Def ('[ ConstRef s0 (Struct "gcs_radio_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkGcsRadioSender = makeMavlinkSender "gcs_radio_msg" gcsRadioMsgId gcsRadioCrcExtra

instance MavlinkUnpackableMsg "gcs_radio_msg" where
    unpackMsg = ( gcsRadioUnpack , gcsRadioMsgId )

gcsRadioUnpack :: Def ('[ Ref s1 (Struct "gcs_radio_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
gcsRadioUnpack = proc "mavlink_gcs_radio_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

gcsRadioPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "gcs_radio_msg")
                              ] :-> () )
gcsRadioPackRef = proc "mavlink_gcs_radio_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> rxerrors)
  packRef buf (off + 2) (msg ~> fixed)
  packRef buf (off + 4) (msg ~> rssi)
  packRef buf (off + 5) (msg ~> remrssi)
  packRef buf (off + 6) (msg ~> txbuf)
  packRef buf (off + 7) (msg ~> noise)
  packRef buf (off + 8) (msg ~> remnoise)

gcsRadioUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "gcs_radio_msg")
                                ] :-> () )
gcsRadioUnpackRef = proc "mavlink_gcs_radio_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> rxerrors)
  unpackRef buf (off + 2) (msg ~> fixed)
  unpackRef buf (off + 4) (msg ~> rssi)
  unpackRef buf (off + 5) (msg ~> remrssi)
  unpackRef buf (off + 6) (msg ~> txbuf)
  unpackRef buf (off + 7) (msg ~> noise)
  unpackRef buf (off + 8) (msg ~> remnoise)

instance SerializableRef (Struct "gcs_radio_msg") where
  packRef = call_ gcsRadioPackRef
  unpackRef = call_ gcsRadioUnpackRef
