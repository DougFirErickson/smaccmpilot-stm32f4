{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Data32 where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

data32MsgId :: Uint8
data32MsgId = 170

data32CrcExtra :: Uint8
data32CrcExtra = 240

data32Module :: Module
data32Module = package "mavlink_data32_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkData32Sender
  incl data32Unpack
  defStruct (Proxy :: Proxy "data32_msg")
  incl data32PackRef
  incl data32UnpackRef

[ivory|
struct data32_msg
  { data32_type :: Stored Uint8
  ; len :: Stored Uint8
  ; data32 :: Array 32 (Stored Uint8)
  }
|]

mkData32Sender ::
  Def ('[ ConstRef s0 (Struct "data32_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkData32Sender = makeMavlinkSender "data32_msg" data32MsgId data32CrcExtra

instance MavlinkUnpackableMsg "data32_msg" where
    unpackMsg = ( data32Unpack , data32MsgId )

data32Unpack :: Def ('[ Ref s1 (Struct "data32_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
data32Unpack = proc "mavlink_data32_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

data32PackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "data32_msg")
                              ] :-> () )
data32PackRef = proc "mavlink_data32_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> data32_type)
  packRef buf (off + 1) (msg ~> len)
  packRef buf (off + 2) (msg ~> data32)

data32UnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "data32_msg")
                                ] :-> () )
data32UnpackRef = proc "mavlink_data32_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> data32_type)
  unpackRef buf (off + 1) (msg ~> len)
  unpackRef buf (off + 2) (msg ~> data32)

instance SerializableRef (Struct "data32_msg") where
  packRef = call_ data32PackRef
  unpackRef = call_ data32UnpackRef
