{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Statustext where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

statustextMsgId :: Uint8
statustextMsgId = 253

statustextCrcExtra :: Uint8
statustextCrcExtra = 83

statustextModule :: Module
statustextModule = package "mavlink_statustext_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkStatustextSender
  incl statustextUnpack
  defStruct (Proxy :: Proxy "statustext_msg")
  incl statustextPackRef
  incl statustextUnpackRef

[ivory|
struct statustext_msg
  { severity :: Stored Uint8
  ; text :: Array 50 (Stored Uint8)
  }
|]

mkStatustextSender ::
  Def ('[ ConstRef s0 (Struct "statustext_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkStatustextSender = makeMavlinkSender "statustext_msg" statustextMsgId statustextCrcExtra

instance MavlinkUnpackableMsg "statustext_msg" where
    unpackMsg = ( statustextUnpack , statustextMsgId )

statustextUnpack :: Def ('[ Ref s1 (Struct "statustext_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
statustextUnpack = proc "mavlink_statustext_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

statustextPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "statustext_msg")
                              ] :-> () )
statustextPackRef = proc "mavlink_statustext_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> severity)
  packRef buf (off + 1) (msg ~> text)

statustextUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "statustext_msg")
                                ] :-> () )
statustextUnpackRef = proc "mavlink_statustext_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> severity)
  unpackRef buf (off + 1) (msg ~> text)

instance SerializableRef (Struct "statustext_msg") where
  packRef = call_ statustextPackRef
  unpackRef = call_ statustextUnpackRef
