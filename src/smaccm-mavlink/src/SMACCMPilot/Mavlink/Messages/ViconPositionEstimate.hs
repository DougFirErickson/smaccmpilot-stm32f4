{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ViconPositionEstimate where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

viconPositionEstimateMsgId :: Uint8
viconPositionEstimateMsgId = 104

viconPositionEstimateCrcExtra :: Uint8
viconPositionEstimateCrcExtra = 56

viconPositionEstimateModule :: Module
viconPositionEstimateModule = package "mavlink_vicon_position_estimate_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkViconPositionEstimateSender
  incl viconPositionEstimateUnpack
  defStruct (Proxy :: Proxy "vicon_position_estimate_msg")
  incl viconPositionEstimatePackRef
  incl viconPositionEstimateUnpackRef

[ivory|
struct vicon_position_estimate_msg
  { usec :: Stored Uint64
  ; x :: Stored IFloat
  ; y :: Stored IFloat
  ; z :: Stored IFloat
  ; roll :: Stored IFloat
  ; pitch :: Stored IFloat
  ; yaw :: Stored IFloat
  }
|]

mkViconPositionEstimateSender ::
  Def ('[ ConstRef s0 (Struct "vicon_position_estimate_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkViconPositionEstimateSender = makeMavlinkSender "vicon_position_estimate_msg" viconPositionEstimateMsgId viconPositionEstimateCrcExtra

instance MavlinkUnpackableMsg "vicon_position_estimate_msg" where
    unpackMsg = ( viconPositionEstimateUnpack , viconPositionEstimateMsgId )

viconPositionEstimateUnpack :: Def ('[ Ref s1 (Struct "vicon_position_estimate_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
viconPositionEstimateUnpack = proc "mavlink_vicon_position_estimate_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

viconPositionEstimatePackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "vicon_position_estimate_msg")
                              ] :-> () )
viconPositionEstimatePackRef = proc "mavlink_vicon_position_estimate_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> usec)
  packRef buf (off + 8) (msg ~> x)
  packRef buf (off + 12) (msg ~> y)
  packRef buf (off + 16) (msg ~> z)
  packRef buf (off + 20) (msg ~> roll)
  packRef buf (off + 24) (msg ~> pitch)
  packRef buf (off + 28) (msg ~> yaw)

viconPositionEstimateUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "vicon_position_estimate_msg")
                                ] :-> () )
viconPositionEstimateUnpackRef = proc "mavlink_vicon_position_estimate_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> usec)
  unpackRef buf (off + 8) (msg ~> x)
  unpackRef buf (off + 12) (msg ~> y)
  unpackRef buf (off + 16) (msg ~> z)
  unpackRef buf (off + 20) (msg ~> roll)
  unpackRef buf (off + 24) (msg ~> pitch)
  unpackRef buf (off + 28) (msg ~> yaw)

instance SerializableRef (Struct "vicon_position_estimate_msg") where
  packRef = call_ viconPositionEstimatePackRef
  unpackRef = call_ viconPositionEstimateUnpackRef
