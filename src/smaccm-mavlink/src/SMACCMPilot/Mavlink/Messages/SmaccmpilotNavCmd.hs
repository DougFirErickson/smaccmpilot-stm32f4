{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SmaccmpilotNavCmd where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

smaccmpilotNavCmdMsgId :: Uint8
smaccmpilotNavCmdMsgId = 188

smaccmpilotNavCmdCrcExtra :: Uint8
smaccmpilotNavCmdCrcExtra = 96

smaccmpilotNavCmdModule :: Module
smaccmpilotNavCmdModule = package "mavlink_smaccmpilot_nav_cmd_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSmaccmpilotNavCmdSender
  incl smaccmpilotNavCmdUnpack
  defStruct (Proxy :: Proxy "smaccmpilot_nav_cmd_msg")
  incl smaccmpilotNavCmdPackRef
  incl smaccmpilotNavCmdUnpackRef

[ivory|
struct smaccmpilot_nav_cmd_msg
  { alt_set :: Stored Sint32
  ; alt_rate_set :: Stored Sint32
  ; lat_set :: Stored Sint32
  ; lon_set :: Stored Sint32
  ; vel_x_set :: Stored Sint32
  ; vel_y_set :: Stored Sint32
  ; heading_set :: Stored Uint16
  ; autoland_active :: Stored Sint8
  ; autoland_complete :: Stored Sint8
  ; alt_set_valid :: Stored Sint8
  ; heading_set_valid :: Stored Sint8
  ; lat_lon_set_valid :: Stored Sint8
  ; vel_set_valid :: Stored Sint8
  }
|]

mkSmaccmpilotNavCmdSender ::
  Def ('[ ConstRef s0 (Struct "smaccmpilot_nav_cmd_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSmaccmpilotNavCmdSender = makeMavlinkSender "smaccmpilot_nav_cmd_msg" smaccmpilotNavCmdMsgId smaccmpilotNavCmdCrcExtra

instance MavlinkUnpackableMsg "smaccmpilot_nav_cmd_msg" where
    unpackMsg = ( smaccmpilotNavCmdUnpack , smaccmpilotNavCmdMsgId )

smaccmpilotNavCmdUnpack :: Def ('[ Ref s1 (Struct "smaccmpilot_nav_cmd_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
smaccmpilotNavCmdUnpack = proc "mavlink_smaccmpilot_nav_cmd_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

smaccmpilotNavCmdPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "smaccmpilot_nav_cmd_msg")
                              ] :-> () )
smaccmpilotNavCmdPackRef = proc "mavlink_smaccmpilot_nav_cmd_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> alt_set)
  packRef buf (off + 4) (msg ~> alt_rate_set)
  packRef buf (off + 8) (msg ~> lat_set)
  packRef buf (off + 12) (msg ~> lon_set)
  packRef buf (off + 16) (msg ~> vel_x_set)
  packRef buf (off + 20) (msg ~> vel_y_set)
  packRef buf (off + 24) (msg ~> heading_set)
  packRef buf (off + 26) (msg ~> autoland_active)
  packRef buf (off + 27) (msg ~> autoland_complete)
  packRef buf (off + 28) (msg ~> alt_set_valid)
  packRef buf (off + 29) (msg ~> heading_set_valid)
  packRef buf (off + 30) (msg ~> lat_lon_set_valid)
  packRef buf (off + 31) (msg ~> vel_set_valid)

smaccmpilotNavCmdUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "smaccmpilot_nav_cmd_msg")
                                ] :-> () )
smaccmpilotNavCmdUnpackRef = proc "mavlink_smaccmpilot_nav_cmd_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> alt_set)
  unpackRef buf (off + 4) (msg ~> alt_rate_set)
  unpackRef buf (off + 8) (msg ~> lat_set)
  unpackRef buf (off + 12) (msg ~> lon_set)
  unpackRef buf (off + 16) (msg ~> vel_x_set)
  unpackRef buf (off + 20) (msg ~> vel_y_set)
  unpackRef buf (off + 24) (msg ~> heading_set)
  unpackRef buf (off + 26) (msg ~> autoland_active)
  unpackRef buf (off + 27) (msg ~> autoland_complete)
  unpackRef buf (off + 28) (msg ~> alt_set_valid)
  unpackRef buf (off + 29) (msg ~> heading_set_valid)
  unpackRef buf (off + 30) (msg ~> lat_lon_set_valid)
  unpackRef buf (off + 31) (msg ~> vel_set_valid)

instance SerializableRef (Struct "smaccmpilot_nav_cmd_msg") where
  packRef = call_ smaccmpilotNavCmdPackRef
  unpackRef = call_ smaccmpilotNavCmdUnpackRef
