{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionRequestList where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

missionRequestListMsgId :: Uint8
missionRequestListMsgId = 43

missionRequestListCrcExtra :: Uint8
missionRequestListCrcExtra = 132

missionRequestListModule :: Module
missionRequestListModule = package "mavlink_mission_request_list_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionRequestListSender
  incl missionRequestListUnpack
  defStruct (Proxy :: Proxy "mission_request_list_msg")
  incl missionRequestListPackRef
  incl missionRequestListUnpackRef

[ivory|
struct mission_request_list_msg
  { target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionRequestListSender ::
  Def ('[ ConstRef s0 (Struct "mission_request_list_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionRequestListSender = makeMavlinkSender "mission_request_list_msg" missionRequestListMsgId missionRequestListCrcExtra

instance MavlinkUnpackableMsg "mission_request_list_msg" where
    unpackMsg = ( missionRequestListUnpack , missionRequestListMsgId )

missionRequestListUnpack :: Def ('[ Ref s1 (Struct "mission_request_list_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionRequestListUnpack = proc "mavlink_mission_request_list_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

missionRequestListPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "mission_request_list_msg")
                              ] :-> () )
missionRequestListPackRef = proc "mavlink_mission_request_list_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> target_system)
  packRef buf (off + 1) (msg ~> target_component)

missionRequestListUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "mission_request_list_msg")
                                ] :-> () )
missionRequestListUnpackRef = proc "mavlink_mission_request_list_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> target_system)
  unpackRef buf (off + 1) (msg ~> target_component)

instance SerializableRef (Struct "mission_request_list_msg") where
  packRef = call_ missionRequestListPackRef
  unpackRef = call_ missionRequestListUnpackRef
