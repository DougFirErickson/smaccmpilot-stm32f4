{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.LocalPositionSetpoint where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

localPositionSetpointMsgId :: Uint8
localPositionSetpointMsgId = 51

localPositionSetpointCrcExtra :: Uint8
localPositionSetpointCrcExtra = 223

localPositionSetpointModule :: Module
localPositionSetpointModule = package "mavlink_local_position_setpoint_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkLocalPositionSetpointSender
  incl localPositionSetpointUnpack
  defStruct (Proxy :: Proxy "local_position_setpoint_msg")
  incl localPositionSetpointPackRef
  incl localPositionSetpointUnpackRef

[ivory|
struct local_position_setpoint_msg
  { x :: Stored IFloat
  ; y :: Stored IFloat
  ; z :: Stored IFloat
  ; yaw :: Stored IFloat
  ; coordinate_frame :: Stored Uint8
  }
|]

mkLocalPositionSetpointSender ::
  Def ('[ ConstRef s0 (Struct "local_position_setpoint_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkLocalPositionSetpointSender = makeMavlinkSender "local_position_setpoint_msg" localPositionSetpointMsgId localPositionSetpointCrcExtra

instance MavlinkUnpackableMsg "local_position_setpoint_msg" where
    unpackMsg = ( localPositionSetpointUnpack , localPositionSetpointMsgId )

localPositionSetpointUnpack :: Def ('[ Ref s1 (Struct "local_position_setpoint_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
localPositionSetpointUnpack = proc "mavlink_local_position_setpoint_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

localPositionSetpointPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "local_position_setpoint_msg")
                              ] :-> () )
localPositionSetpointPackRef = proc "mavlink_local_position_setpoint_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> x)
  packRef buf (off + 4) (msg ~> y)
  packRef buf (off + 8) (msg ~> z)
  packRef buf (off + 12) (msg ~> yaw)
  packRef buf (off + 16) (msg ~> coordinate_frame)

localPositionSetpointUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "local_position_setpoint_msg")
                                ] :-> () )
localPositionSetpointUnpackRef = proc "mavlink_local_position_setpoint_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> x)
  unpackRef buf (off + 4) (msg ~> y)
  unpackRef buf (off + 8) (msg ~> z)
  unpackRef buf (off + 12) (msg ~> yaw)
  unpackRef buf (off + 16) (msg ~> coordinate_frame)

instance SerializableRef (Struct "local_position_setpoint_msg") where
  packRef = call_ localPositionSetpointPackRef
  unpackRef = call_ localPositionSetpointUnpackRef
