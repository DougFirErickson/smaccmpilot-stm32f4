{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.PosCtlDebug where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

posCtlDebugMsgId :: Uint8
posCtlDebugMsgId = 187

posCtlDebugCrcExtra :: Uint8
posCtlDebugCrcExtra = 23

posCtlDebugModule :: Module
posCtlDebugModule = package "mavlink_pos_ctl_debug_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkPosCtlDebugSender
  incl posCtlDebugUnpack
  defStruct (Proxy :: Proxy "pos_ctl_debug_msg")
  incl posCtlDebugPackRef
  incl posCtlDebugUnpackRef

[ivory|
struct pos_ctl_debug_msg
  { x_vel_setpt :: Stored IFloat
  ; y_vel_setpt :: Stored IFloat
  ; head_setpt :: Stored IFloat
  ; lat_setpt :: Stored Sint32
  ; lon_setpt :: Stored Sint32
  ; x_deviation :: Stored IFloat
  ; y_deviation :: Stored IFloat
  ; x_vel_est :: Stored IFloat
  ; x_vel_p :: Stored IFloat
  ; x_vel_i :: Stored IFloat
  ; x_vel_d :: Stored IFloat
  ; y_vel_est :: Stored IFloat
  ; y_vel_p :: Stored IFloat
  ; y_vel_i :: Stored IFloat
  ; y_vel_d :: Stored IFloat
  }
|]

mkPosCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "pos_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkPosCtlDebugSender = makeMavlinkSender "pos_ctl_debug_msg" posCtlDebugMsgId posCtlDebugCrcExtra

instance MavlinkUnpackableMsg "pos_ctl_debug_msg" where
    unpackMsg = ( posCtlDebugUnpack , posCtlDebugMsgId )

posCtlDebugUnpack :: Def ('[ Ref s1 (Struct "pos_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
posCtlDebugUnpack = proc "mavlink_pos_ctl_debug_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

posCtlDebugPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "pos_ctl_debug_msg")
                              ] :-> () )
posCtlDebugPackRef = proc "mavlink_pos_ctl_debug_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> x_vel_setpt)
  packRef buf (off + 4) (msg ~> y_vel_setpt)
  packRef buf (off + 8) (msg ~> head_setpt)
  packRef buf (off + 12) (msg ~> lat_setpt)
  packRef buf (off + 16) (msg ~> lon_setpt)
  packRef buf (off + 20) (msg ~> x_deviation)
  packRef buf (off + 24) (msg ~> y_deviation)
  packRef buf (off + 28) (msg ~> x_vel_est)
  packRef buf (off + 32) (msg ~> x_vel_p)
  packRef buf (off + 36) (msg ~> x_vel_i)
  packRef buf (off + 40) (msg ~> x_vel_d)
  packRef buf (off + 44) (msg ~> y_vel_est)
  packRef buf (off + 48) (msg ~> y_vel_p)
  packRef buf (off + 52) (msg ~> y_vel_i)
  packRef buf (off + 56) (msg ~> y_vel_d)

posCtlDebugUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "pos_ctl_debug_msg")
                                ] :-> () )
posCtlDebugUnpackRef = proc "mavlink_pos_ctl_debug_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> x_vel_setpt)
  unpackRef buf (off + 4) (msg ~> y_vel_setpt)
  unpackRef buf (off + 8) (msg ~> head_setpt)
  unpackRef buf (off + 12) (msg ~> lat_setpt)
  unpackRef buf (off + 16) (msg ~> lon_setpt)
  unpackRef buf (off + 20) (msg ~> x_deviation)
  unpackRef buf (off + 24) (msg ~> y_deviation)
  unpackRef buf (off + 28) (msg ~> x_vel_est)
  unpackRef buf (off + 32) (msg ~> x_vel_p)
  unpackRef buf (off + 36) (msg ~> x_vel_i)
  unpackRef buf (off + 40) (msg ~> x_vel_d)
  unpackRef buf (off + 44) (msg ~> y_vel_est)
  unpackRef buf (off + 48) (msg ~> y_vel_p)
  unpackRef buf (off + 52) (msg ~> y_vel_i)
  unpackRef buf (off + 56) (msg ~> y_vel_d)

instance SerializableRef (Struct "pos_ctl_debug_msg") where
  packRef = call_ posCtlDebugPackRef
  unpackRef = call_ posCtlDebugUnpackRef
