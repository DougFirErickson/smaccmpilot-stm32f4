{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.PosCtlDebug where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

posCtlDebugMsgId :: Uint8
posCtlDebugMsgId = 187

posCtlDebugCrcExtra :: Uint8
posCtlDebugCrcExtra = 23

posCtlDebugModule :: Module
posCtlDebugModule = package "mavlink_pos_ctl_debug_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkPosCtlDebugSender
  incl posCtlDebugUnpack
  defStruct (Proxy :: Proxy "pos_ctl_debug_msg")
  wrappedPackMod posCtlDebugWrapper

[ivory|
struct pos_ctl_debug_msg
  { x_vel_setpt :: Stored IFloat
  ; y_vel_setpt :: Stored IFloat
  ; head_setpt :: Stored IFloat
  ; lat_setpt :: Stored Sint32
  ; lon_setpt :: Stored Sint32
  ; x_deviation :: Stored IFloat
  ; y_deviation :: Stored IFloat
  ; x_vel_est :: Stored IFloat
  ; x_vel_p :: Stored IFloat
  ; x_vel_i :: Stored IFloat
  ; x_vel_d :: Stored IFloat
  ; y_vel_est :: Stored IFloat
  ; y_vel_p :: Stored IFloat
  ; y_vel_i :: Stored IFloat
  ; y_vel_d :: Stored IFloat
  }
|]

mkPosCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "pos_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkPosCtlDebugSender = makeMavlinkSender "pos_ctl_debug_msg" posCtlDebugMsgId posCtlDebugCrcExtra

instance MavlinkUnpackableMsg "pos_ctl_debug_msg" where
    unpackMsg = ( posCtlDebugUnpack , posCtlDebugMsgId )

posCtlDebugUnpack :: Def ('[ Ref s1 (Struct "pos_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
posCtlDebugUnpack = proc "mavlink_pos_ctl_debug_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

posCtlDebugWrapper :: WrappedPackRep (Struct "pos_ctl_debug_msg")
posCtlDebugWrapper = wrapPackRep "mavlink_pos_ctl_debug" $ packStruct
  [ packLabel x_vel_setpt
  , packLabel y_vel_setpt
  , packLabel head_setpt
  , packLabel lat_setpt
  , packLabel lon_setpt
  , packLabel x_deviation
  , packLabel y_deviation
  , packLabel x_vel_est
  , packLabel x_vel_p
  , packLabel x_vel_i
  , packLabel x_vel_d
  , packLabel y_vel_est
  , packLabel y_vel_p
  , packLabel y_vel_i
  , packLabel y_vel_d
  ]

instance Packable (Struct "pos_ctl_debug_msg") where
  packRep = wrappedPackRep posCtlDebugWrapper
