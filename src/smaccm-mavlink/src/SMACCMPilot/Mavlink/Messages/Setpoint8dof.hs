{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Setpoint8dof where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

setpoint8dofMsgId :: Uint8
setpoint8dofMsgId = 148

setpoint8dofCrcExtra :: Uint8
setpoint8dofCrcExtra = 241

setpoint8dofModule :: Module
setpoint8dofModule = package "mavlink_setpoint_8dof_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSetpoint8dofSender
  incl setpoint8dofUnpack
  defStruct (Proxy :: Proxy "setpoint_8dof_msg")
  incl setpoint8dofPackRef
  incl setpoint8dofUnpackRef

[ivory|
struct setpoint_8dof_msg
  { val1 :: Stored IFloat
  ; val2 :: Stored IFloat
  ; val3 :: Stored IFloat
  ; val4 :: Stored IFloat
  ; val5 :: Stored IFloat
  ; val6 :: Stored IFloat
  ; val7 :: Stored IFloat
  ; val8 :: Stored IFloat
  ; target_system :: Stored Uint8
  }
|]

mkSetpoint8dofSender ::
  Def ('[ ConstRef s0 (Struct "setpoint_8dof_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetpoint8dofSender = makeMavlinkSender "setpoint_8dof_msg" setpoint8dofMsgId setpoint8dofCrcExtra

instance MavlinkUnpackableMsg "setpoint_8dof_msg" where
    unpackMsg = ( setpoint8dofUnpack , setpoint8dofMsgId )

setpoint8dofUnpack :: Def ('[ Ref s1 (Struct "setpoint_8dof_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setpoint8dofUnpack = proc "mavlink_setpoint_8dof_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

setpoint8dofPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "setpoint_8dof_msg")
                              ] :-> () )
setpoint8dofPackRef = proc "mavlink_setpoint_8dof_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> val1)
  packRef buf (off + 4) (msg ~> val2)
  packRef buf (off + 8) (msg ~> val3)
  packRef buf (off + 12) (msg ~> val4)
  packRef buf (off + 16) (msg ~> val5)
  packRef buf (off + 20) (msg ~> val6)
  packRef buf (off + 24) (msg ~> val7)
  packRef buf (off + 28) (msg ~> val8)
  packRef buf (off + 32) (msg ~> target_system)

setpoint8dofUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "setpoint_8dof_msg")
                                ] :-> () )
setpoint8dofUnpackRef = proc "mavlink_setpoint_8dof_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> val1)
  unpackRef buf (off + 4) (msg ~> val2)
  unpackRef buf (off + 8) (msg ~> val3)
  unpackRef buf (off + 12) (msg ~> val4)
  unpackRef buf (off + 16) (msg ~> val5)
  unpackRef buf (off + 20) (msg ~> val6)
  unpackRef buf (off + 24) (msg ~> val7)
  unpackRef buf (off + 28) (msg ~> val8)
  unpackRef buf (off + 32) (msg ~> target_system)

instance SerializableRef (Struct "setpoint_8dof_msg") where
  packRef = call_ setpoint8dofPackRef
  unpackRef = call_ setpoint8dofUnpackRef
