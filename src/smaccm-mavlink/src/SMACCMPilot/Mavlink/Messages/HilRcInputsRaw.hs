{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.HilRcInputsRaw where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

hilRcInputsRawMsgId :: Uint8
hilRcInputsRawMsgId = 92

hilRcInputsRawCrcExtra :: Uint8
hilRcInputsRawCrcExtra = 54

hilRcInputsRawModule :: Module
hilRcInputsRawModule = package "mavlink_hil_rc_inputs_raw_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkHilRcInputsRawSender
  incl hilRcInputsRawUnpack
  defStruct (Proxy :: Proxy "hil_rc_inputs_raw_msg")
  incl hilRcInputsRawPackRef
  incl hilRcInputsRawUnpackRef

[ivory|
struct hil_rc_inputs_raw_msg
  { time_usec :: Stored Uint64
  ; chan1_raw :: Stored Uint16
  ; chan2_raw :: Stored Uint16
  ; chan3_raw :: Stored Uint16
  ; chan4_raw :: Stored Uint16
  ; chan5_raw :: Stored Uint16
  ; chan6_raw :: Stored Uint16
  ; chan7_raw :: Stored Uint16
  ; chan8_raw :: Stored Uint16
  ; chan9_raw :: Stored Uint16
  ; chan10_raw :: Stored Uint16
  ; chan11_raw :: Stored Uint16
  ; chan12_raw :: Stored Uint16
  ; rssi :: Stored Uint8
  }
|]

mkHilRcInputsRawSender ::
  Def ('[ ConstRef s0 (Struct "hil_rc_inputs_raw_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkHilRcInputsRawSender = makeMavlinkSender "hil_rc_inputs_raw_msg" hilRcInputsRawMsgId hilRcInputsRawCrcExtra

instance MavlinkUnpackableMsg "hil_rc_inputs_raw_msg" where
    unpackMsg = ( hilRcInputsRawUnpack , hilRcInputsRawMsgId )

hilRcInputsRawUnpack :: Def ('[ Ref s1 (Struct "hil_rc_inputs_raw_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
hilRcInputsRawUnpack = proc "mavlink_hil_rc_inputs_raw_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

hilRcInputsRawPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "hil_rc_inputs_raw_msg")
                              ] :-> () )
hilRcInputsRawPackRef = proc "mavlink_hil_rc_inputs_raw_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_usec)
  packRef buf (off + 8) (msg ~> chan1_raw)
  packRef buf (off + 10) (msg ~> chan2_raw)
  packRef buf (off + 12) (msg ~> chan3_raw)
  packRef buf (off + 14) (msg ~> chan4_raw)
  packRef buf (off + 16) (msg ~> chan5_raw)
  packRef buf (off + 18) (msg ~> chan6_raw)
  packRef buf (off + 20) (msg ~> chan7_raw)
  packRef buf (off + 22) (msg ~> chan8_raw)
  packRef buf (off + 24) (msg ~> chan9_raw)
  packRef buf (off + 26) (msg ~> chan10_raw)
  packRef buf (off + 28) (msg ~> chan11_raw)
  packRef buf (off + 30) (msg ~> chan12_raw)
  packRef buf (off + 32) (msg ~> rssi)

hilRcInputsRawUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "hil_rc_inputs_raw_msg")
                                ] :-> () )
hilRcInputsRawUnpackRef = proc "mavlink_hil_rc_inputs_raw_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_usec)
  unpackRef buf (off + 8) (msg ~> chan1_raw)
  unpackRef buf (off + 10) (msg ~> chan2_raw)
  unpackRef buf (off + 12) (msg ~> chan3_raw)
  unpackRef buf (off + 14) (msg ~> chan4_raw)
  unpackRef buf (off + 16) (msg ~> chan5_raw)
  unpackRef buf (off + 18) (msg ~> chan6_raw)
  unpackRef buf (off + 20) (msg ~> chan7_raw)
  unpackRef buf (off + 22) (msg ~> chan8_raw)
  unpackRef buf (off + 24) (msg ~> chan9_raw)
  unpackRef buf (off + 26) (msg ~> chan10_raw)
  unpackRef buf (off + 28) (msg ~> chan11_raw)
  unpackRef buf (off + 30) (msg ~> chan12_raw)
  unpackRef buf (off + 32) (msg ~> rssi)

instance SerializableRef (Struct "hil_rc_inputs_raw_msg") where
  packRef = call_ hilRcInputsRawPackRef
  unpackRef = call_ hilRcInputsRawUnpackRef
