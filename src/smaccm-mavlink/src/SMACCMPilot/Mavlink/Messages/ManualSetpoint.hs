{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ManualSetpoint where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

manualSetpointMsgId :: Uint8
manualSetpointMsgId = 81

manualSetpointCrcExtra :: Uint8
manualSetpointCrcExtra = 106

manualSetpointModule :: Module
manualSetpointModule = package "mavlink_manual_setpoint_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkManualSetpointSender
  incl manualSetpointUnpack
  defStruct (Proxy :: Proxy "manual_setpoint_msg")
  incl manualSetpointPackRef
  incl manualSetpointUnpackRef

[ivory|
struct manual_setpoint_msg
  { time_boot_ms :: Stored Uint32
  ; roll :: Stored IFloat
  ; pitch :: Stored IFloat
  ; yaw :: Stored IFloat
  ; thrust :: Stored IFloat
  ; mode_switch :: Stored Uint8
  ; manual_override_switch :: Stored Uint8
  }
|]

mkManualSetpointSender ::
  Def ('[ ConstRef s0 (Struct "manual_setpoint_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkManualSetpointSender = makeMavlinkSender "manual_setpoint_msg" manualSetpointMsgId manualSetpointCrcExtra

instance MavlinkUnpackableMsg "manual_setpoint_msg" where
    unpackMsg = ( manualSetpointUnpack , manualSetpointMsgId )

manualSetpointUnpack :: Def ('[ Ref s1 (Struct "manual_setpoint_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
manualSetpointUnpack = proc "mavlink_manual_setpoint_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

manualSetpointPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "manual_setpoint_msg")
                              ] :-> () )
manualSetpointPackRef = proc "mavlink_manual_setpoint_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> roll)
  packRef buf (off + 8) (msg ~> pitch)
  packRef buf (off + 12) (msg ~> yaw)
  packRef buf (off + 16) (msg ~> thrust)
  packRef buf (off + 20) (msg ~> mode_switch)
  packRef buf (off + 21) (msg ~> manual_override_switch)

manualSetpointUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "manual_setpoint_msg")
                                ] :-> () )
manualSetpointUnpackRef = proc "mavlink_manual_setpoint_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> roll)
  unpackRef buf (off + 8) (msg ~> pitch)
  unpackRef buf (off + 12) (msg ~> yaw)
  unpackRef buf (off + 16) (msg ~> thrust)
  unpackRef buf (off + 20) (msg ~> mode_switch)
  unpackRef buf (off + 21) (msg ~> manual_override_switch)

instance SerializableRef (Struct "manual_setpoint_msg") where
  packRef = call_ manualSetpointPackRef
  unpackRef = call_ manualSetpointUnpackRef
