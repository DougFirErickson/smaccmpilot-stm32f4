{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionCurrent where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

missionCurrentMsgId :: Uint8
missionCurrentMsgId = 42

missionCurrentCrcExtra :: Uint8
missionCurrentCrcExtra = 28

missionCurrentModule :: Module
missionCurrentModule = package "mavlink_mission_current_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionCurrentSender
  incl missionCurrentUnpack
  defStruct (Proxy :: Proxy "mission_current_msg")
  incl missionCurrentPackRef
  incl missionCurrentUnpackRef

[ivory|
struct mission_current_msg
  { mission_current_seq :: Stored Uint16
  }
|]

mkMissionCurrentSender ::
  Def ('[ ConstRef s0 (Struct "mission_current_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionCurrentSender = makeMavlinkSender "mission_current_msg" missionCurrentMsgId missionCurrentCrcExtra

instance MavlinkUnpackableMsg "mission_current_msg" where
    unpackMsg = ( missionCurrentUnpack , missionCurrentMsgId )

missionCurrentUnpack :: Def ('[ Ref s1 (Struct "mission_current_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionCurrentUnpack = proc "mavlink_mission_current_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

missionCurrentPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "mission_current_msg")
                              ] :-> () )
missionCurrentPackRef = proc "mavlink_mission_current_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> mission_current_seq)

missionCurrentUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "mission_current_msg")
                                ] :-> () )
missionCurrentUnpackRef = proc "mavlink_mission_current_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> mission_current_seq)

instance SerializableRef (Struct "mission_current_msg") where
  packRef = call_ missionCurrentPackRef
  unpackRef = call_ missionCurrentUnpackRef
