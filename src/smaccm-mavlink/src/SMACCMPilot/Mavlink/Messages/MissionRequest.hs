{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionRequest where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

missionRequestMsgId :: Uint8
missionRequestMsgId = 40

missionRequestCrcExtra :: Uint8
missionRequestCrcExtra = 230

missionRequestModule :: Module
missionRequestModule = package "mavlink_mission_request_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionRequestSender
  incl missionRequestUnpack
  defStruct (Proxy :: Proxy "mission_request_msg")
  incl missionRequestPackRef
  incl missionRequestUnpackRef

[ivory|
struct mission_request_msg
  { mission_request_seq :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionRequestSender ::
  Def ('[ ConstRef s0 (Struct "mission_request_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionRequestSender = makeMavlinkSender "mission_request_msg" missionRequestMsgId missionRequestCrcExtra

instance MavlinkUnpackableMsg "mission_request_msg" where
    unpackMsg = ( missionRequestUnpack , missionRequestMsgId )

missionRequestUnpack :: Def ('[ Ref s1 (Struct "mission_request_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionRequestUnpack = proc "mavlink_mission_request_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

missionRequestPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "mission_request_msg")
                              ] :-> () )
missionRequestPackRef = proc "mavlink_mission_request_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> mission_request_seq)
  packRef buf (off + 2) (msg ~> target_system)
  packRef buf (off + 3) (msg ~> target_component)

missionRequestUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "mission_request_msg")
                                ] :-> () )
missionRequestUnpackRef = proc "mavlink_mission_request_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> mission_request_seq)
  unpackRef buf (off + 2) (msg ~> target_system)
  unpackRef buf (off + 3) (msg ~> target_component)

instance SerializableRef (Struct "mission_request_msg") where
  packRef = call_ missionRequestPackRef
  unpackRef = call_ missionRequestUnpackRef
