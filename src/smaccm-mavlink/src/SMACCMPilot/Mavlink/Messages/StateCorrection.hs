{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.StateCorrection where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

stateCorrectionMsgId :: Uint8
stateCorrectionMsgId = 64

stateCorrectionCrcExtra :: Uint8
stateCorrectionCrcExtra = 130

stateCorrectionModule :: Module
stateCorrectionModule = package "mavlink_state_correction_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkStateCorrectionSender
  incl stateCorrectionUnpack
  defStruct (Proxy :: Proxy "state_correction_msg")
  incl stateCorrectionPackRef
  incl stateCorrectionUnpackRef

[ivory|
struct state_correction_msg
  { xErr :: Stored IFloat
  ; yErr :: Stored IFloat
  ; zErr :: Stored IFloat
  ; rollErr :: Stored IFloat
  ; pitchErr :: Stored IFloat
  ; yawErr :: Stored IFloat
  ; vxErr :: Stored IFloat
  ; vyErr :: Stored IFloat
  ; vzErr :: Stored IFloat
  }
|]

mkStateCorrectionSender ::
  Def ('[ ConstRef s0 (Struct "state_correction_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkStateCorrectionSender = makeMavlinkSender "state_correction_msg" stateCorrectionMsgId stateCorrectionCrcExtra

instance MavlinkUnpackableMsg "state_correction_msg" where
    unpackMsg = ( stateCorrectionUnpack , stateCorrectionMsgId )

stateCorrectionUnpack :: Def ('[ Ref s1 (Struct "state_correction_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
stateCorrectionUnpack = proc "mavlink_state_correction_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

stateCorrectionPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "state_correction_msg")
                              ] :-> () )
stateCorrectionPackRef = proc "mavlink_state_correction_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> xErr)
  packRef buf (off + 4) (msg ~> yErr)
  packRef buf (off + 8) (msg ~> zErr)
  packRef buf (off + 12) (msg ~> rollErr)
  packRef buf (off + 16) (msg ~> pitchErr)
  packRef buf (off + 20) (msg ~> yawErr)
  packRef buf (off + 24) (msg ~> vxErr)
  packRef buf (off + 28) (msg ~> vyErr)
  packRef buf (off + 32) (msg ~> vzErr)

stateCorrectionUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "state_correction_msg")
                                ] :-> () )
stateCorrectionUnpackRef = proc "mavlink_state_correction_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> xErr)
  unpackRef buf (off + 4) (msg ~> yErr)
  unpackRef buf (off + 8) (msg ~> zErr)
  unpackRef buf (off + 12) (msg ~> rollErr)
  unpackRef buf (off + 16) (msg ~> pitchErr)
  unpackRef buf (off + 20) (msg ~> yawErr)
  unpackRef buf (off + 24) (msg ~> vxErr)
  unpackRef buf (off + 28) (msg ~> vyErr)
  unpackRef buf (off + 32) (msg ~> vzErr)

instance SerializableRef (Struct "state_correction_msg") where
  packRef = call_ stateCorrectionPackRef
  unpackRef = call_ stateCorrectionUnpackRef
