{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionItem where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

missionItemMsgId :: Uint8
missionItemMsgId = 39

missionItemCrcExtra :: Uint8
missionItemCrcExtra = 254

missionItemModule :: Module
missionItemModule = package "mavlink_mission_item_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionItemSender
  incl missionItemUnpack
  defStruct (Proxy :: Proxy "mission_item_msg")
  incl missionItemPackRef
  incl missionItemUnpackRef

[ivory|
struct mission_item_msg
  { param1 :: Stored IFloat
  ; param2 :: Stored IFloat
  ; param3 :: Stored IFloat
  ; param4 :: Stored IFloat
  ; x :: Stored IFloat
  ; y :: Stored IFloat
  ; z :: Stored IFloat
  ; mission_item_seq :: Stored Uint16
  ; command :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; frame :: Stored Uint8
  ; current :: Stored Uint8
  ; autocontinue :: Stored Uint8
  }
|]

mkMissionItemSender ::
  Def ('[ ConstRef s0 (Struct "mission_item_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionItemSender = makeMavlinkSender "mission_item_msg" missionItemMsgId missionItemCrcExtra

instance MavlinkUnpackableMsg "mission_item_msg" where
    unpackMsg = ( missionItemUnpack , missionItemMsgId )

missionItemUnpack :: Def ('[ Ref s1 (Struct "mission_item_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionItemUnpack = proc "mavlink_mission_item_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

missionItemPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "mission_item_msg")
                              ] :-> () )
missionItemPackRef = proc "mavlink_mission_item_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> param1)
  packRef buf (off + 4) (msg ~> param2)
  packRef buf (off + 8) (msg ~> param3)
  packRef buf (off + 12) (msg ~> param4)
  packRef buf (off + 16) (msg ~> x)
  packRef buf (off + 20) (msg ~> y)
  packRef buf (off + 24) (msg ~> z)
  packRef buf (off + 28) (msg ~> mission_item_seq)
  packRef buf (off + 30) (msg ~> command)
  packRef buf (off + 32) (msg ~> target_system)
  packRef buf (off + 33) (msg ~> target_component)
  packRef buf (off + 34) (msg ~> frame)
  packRef buf (off + 35) (msg ~> current)
  packRef buf (off + 36) (msg ~> autocontinue)

missionItemUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "mission_item_msg")
                                ] :-> () )
missionItemUnpackRef = proc "mavlink_mission_item_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> param1)
  unpackRef buf (off + 4) (msg ~> param2)
  unpackRef buf (off + 8) (msg ~> param3)
  unpackRef buf (off + 12) (msg ~> param4)
  unpackRef buf (off + 16) (msg ~> x)
  unpackRef buf (off + 20) (msg ~> y)
  unpackRef buf (off + 24) (msg ~> z)
  unpackRef buf (off + 28) (msg ~> mission_item_seq)
  unpackRef buf (off + 30) (msg ~> command)
  unpackRef buf (off + 32) (msg ~> target_system)
  unpackRef buf (off + 33) (msg ~> target_component)
  unpackRef buf (off + 34) (msg ~> frame)
  unpackRef buf (off + 35) (msg ~> current)
  unpackRef buf (off + 36) (msg ~> autocontinue)

instance SerializableRef (Struct "mission_item_msg") where
  packRef = call_ missionItemPackRef
  unpackRef = call_ missionItemUnpackRef
