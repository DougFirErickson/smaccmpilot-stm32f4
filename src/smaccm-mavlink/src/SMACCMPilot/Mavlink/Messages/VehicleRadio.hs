{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.VehicleRadio where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

vehicleRadioMsgId :: Uint8
vehicleRadioMsgId = 174

vehicleRadioCrcExtra :: Uint8
vehicleRadioCrcExtra = 238

vehicleRadioModule :: Module
vehicleRadioModule = package "mavlink_vehicle_radio_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkVehicleRadioSender
  incl vehicleRadioUnpack
  defStruct (Proxy :: Proxy "vehicle_radio_msg")
  incl vehicleRadioPackRef
  incl vehicleRadioUnpackRef

[ivory|
struct vehicle_radio_msg
  { rxerrors :: Stored Uint16
  ; fixed :: Stored Uint16
  ; rssi :: Stored Uint8
  ; remrssi :: Stored Uint8
  ; txbuf :: Stored Uint8
  ; noise :: Stored Uint8
  ; remnoise :: Stored Uint8
  }
|]

mkVehicleRadioSender ::
  Def ('[ ConstRef s0 (Struct "vehicle_radio_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkVehicleRadioSender = makeMavlinkSender "vehicle_radio_msg" vehicleRadioMsgId vehicleRadioCrcExtra

instance MavlinkUnpackableMsg "vehicle_radio_msg" where
    unpackMsg = ( vehicleRadioUnpack , vehicleRadioMsgId )

vehicleRadioUnpack :: Def ('[ Ref s1 (Struct "vehicle_radio_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
vehicleRadioUnpack = proc "mavlink_vehicle_radio_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

vehicleRadioPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "vehicle_radio_msg")
                              ] :-> () )
vehicleRadioPackRef = proc "mavlink_vehicle_radio_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> rxerrors)
  packRef buf (off + 2) (msg ~> fixed)
  packRef buf (off + 4) (msg ~> rssi)
  packRef buf (off + 5) (msg ~> remrssi)
  packRef buf (off + 6) (msg ~> txbuf)
  packRef buf (off + 7) (msg ~> noise)
  packRef buf (off + 8) (msg ~> remnoise)

vehicleRadioUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "vehicle_radio_msg")
                                ] :-> () )
vehicleRadioUnpackRef = proc "mavlink_vehicle_radio_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> rxerrors)
  unpackRef buf (off + 2) (msg ~> fixed)
  unpackRef buf (off + 4) (msg ~> rssi)
  unpackRef buf (off + 5) (msg ~> remrssi)
  unpackRef buf (off + 6) (msg ~> txbuf)
  unpackRef buf (off + 7) (msg ~> noise)
  unpackRef buf (off + 8) (msg ~> remnoise)

instance SerializableRef (Struct "vehicle_radio_msg") where
  packRef = call_ vehicleRadioPackRef
  unpackRef = call_ vehicleRadioUnpackRef
