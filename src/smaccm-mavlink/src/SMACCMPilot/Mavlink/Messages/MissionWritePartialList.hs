{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionWritePartialList where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

missionWritePartialListMsgId :: Uint8
missionWritePartialListMsgId = 38

missionWritePartialListCrcExtra :: Uint8
missionWritePartialListCrcExtra = 9

missionWritePartialListModule :: Module
missionWritePartialListModule = package "mavlink_mission_write_partial_list_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionWritePartialListSender
  incl missionWritePartialListUnpack
  defStruct (Proxy :: Proxy "mission_write_partial_list_msg")
  incl missionWritePartialListPackRef
  incl missionWritePartialListUnpackRef

[ivory|
struct mission_write_partial_list_msg
  { start_index :: Stored Sint16
  ; end_index :: Stored Sint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionWritePartialListSender ::
  Def ('[ ConstRef s0 (Struct "mission_write_partial_list_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionWritePartialListSender = makeMavlinkSender "mission_write_partial_list_msg" missionWritePartialListMsgId missionWritePartialListCrcExtra

instance MavlinkUnpackableMsg "mission_write_partial_list_msg" where
    unpackMsg = ( missionWritePartialListUnpack , missionWritePartialListMsgId )

missionWritePartialListUnpack :: Def ('[ Ref s1 (Struct "mission_write_partial_list_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionWritePartialListUnpack = proc "mavlink_mission_write_partial_list_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

missionWritePartialListPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "mission_write_partial_list_msg")
                              ] :-> () )
missionWritePartialListPackRef = proc "mavlink_mission_write_partial_list_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> start_index)
  packRef buf (off + 2) (msg ~> end_index)
  packRef buf (off + 4) (msg ~> target_system)
  packRef buf (off + 5) (msg ~> target_component)

missionWritePartialListUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "mission_write_partial_list_msg")
                                ] :-> () )
missionWritePartialListUnpackRef = proc "mavlink_mission_write_partial_list_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> start_index)
  unpackRef buf (off + 2) (msg ~> end_index)
  unpackRef buf (off + 4) (msg ~> target_system)
  unpackRef buf (off + 5) (msg ~> target_component)

instance SerializableRef (Struct "mission_write_partial_list_msg") where
  packRef = call_ missionWritePartialListPackRef
  unpackRef = call_ missionWritePartialListUnpackRef
