{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ParamSet where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

paramSetMsgId :: Uint8
paramSetMsgId = 23

paramSetCrcExtra :: Uint8
paramSetCrcExtra = 168

paramSetModule :: Module
paramSetModule = package "mavlink_param_set_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkParamSetSender
  incl paramSetUnpack
  defStruct (Proxy :: Proxy "param_set_msg")
  incl paramSetPackRef
  incl paramSetUnpackRef

[ivory|
struct param_set_msg
  { param_value :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; param_type :: Stored Uint8
  ; param_id :: Array 16 (Stored Uint8)
  }
|]

mkParamSetSender ::
  Def ('[ ConstRef s0 (Struct "param_set_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkParamSetSender = makeMavlinkSender "param_set_msg" paramSetMsgId paramSetCrcExtra

instance MavlinkUnpackableMsg "param_set_msg" where
    unpackMsg = ( paramSetUnpack , paramSetMsgId )

paramSetUnpack :: Def ('[ Ref s1 (Struct "param_set_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
paramSetUnpack = proc "mavlink_param_set_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

paramSetPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "param_set_msg")
                              ] :-> () )
paramSetPackRef = proc "mavlink_param_set_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> param_value)
  packRef buf (off + 4) (msg ~> target_system)
  packRef buf (off + 5) (msg ~> target_component)
  packRef buf (off + 22) (msg ~> param_type)
  packRef buf (off + 6) (msg ~> param_id)

paramSetUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "param_set_msg")
                                ] :-> () )
paramSetUnpackRef = proc "mavlink_param_set_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> param_value)
  unpackRef buf (off + 4) (msg ~> target_system)
  unpackRef buf (off + 5) (msg ~> target_component)
  unpackRef buf (off + 22) (msg ~> param_type)
  unpackRef buf (off + 6) (msg ~> param_id)

instance SerializableRef (Struct "param_set_msg") where
  packRef = call_ paramSetPackRef
  unpackRef = call_ paramSetUnpackRef
