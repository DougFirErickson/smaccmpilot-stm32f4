{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ManualControl where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

manualControlMsgId :: Uint8
manualControlMsgId = 69

manualControlCrcExtra :: Uint8
manualControlCrcExtra = 243

manualControlModule :: Module
manualControlModule = package "mavlink_manual_control_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkManualControlSender
  incl manualControlUnpack
  defStruct (Proxy :: Proxy "manual_control_msg")
  incl manualControlPackRef
  incl manualControlUnpackRef

[ivory|
struct manual_control_msg
  { x :: Stored Sint16
  ; y :: Stored Sint16
  ; z :: Stored Sint16
  ; r :: Stored Sint16
  ; buttons :: Stored Uint16
  ; target :: Stored Uint8
  }
|]

mkManualControlSender ::
  Def ('[ ConstRef s0 (Struct "manual_control_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkManualControlSender = makeMavlinkSender "manual_control_msg" manualControlMsgId manualControlCrcExtra

instance MavlinkUnpackableMsg "manual_control_msg" where
    unpackMsg = ( manualControlUnpack , manualControlMsgId )

manualControlUnpack :: Def ('[ Ref s1 (Struct "manual_control_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
manualControlUnpack = proc "mavlink_manual_control_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

manualControlPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "manual_control_msg")
                              ] :-> () )
manualControlPackRef = proc "mavlink_manual_control_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> x)
  packRef buf (off + 2) (msg ~> y)
  packRef buf (off + 4) (msg ~> z)
  packRef buf (off + 6) (msg ~> r)
  packRef buf (off + 8) (msg ~> buttons)
  packRef buf (off + 10) (msg ~> target)

manualControlUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "manual_control_msg")
                                ] :-> () )
manualControlUnpackRef = proc "mavlink_manual_control_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> x)
  unpackRef buf (off + 2) (msg ~> y)
  unpackRef buf (off + 4) (msg ~> z)
  unpackRef buf (off + 6) (msg ~> r)
  unpackRef buf (off + 8) (msg ~> buttons)
  unpackRef buf (off + 10) (msg ~> target)

instance SerializableRef (Struct "manual_control_msg") where
  packRef = call_ manualControlPackRef
  unpackRef = call_ manualControlUnpackRef
