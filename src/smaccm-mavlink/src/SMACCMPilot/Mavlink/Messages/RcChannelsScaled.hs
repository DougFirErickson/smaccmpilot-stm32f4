{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RcChannelsScaled where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

rcChannelsScaledMsgId :: Uint8
rcChannelsScaledMsgId = 34

rcChannelsScaledCrcExtra :: Uint8
rcChannelsScaledCrcExtra = 237

rcChannelsScaledModule :: Module
rcChannelsScaledModule = package "mavlink_rc_channels_scaled_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRcChannelsScaledSender
  incl rcChannelsScaledUnpack
  defStruct (Proxy :: Proxy "rc_channels_scaled_msg")
  wrappedPackMod rcChannelsScaledWrapper

[ivory|
struct rc_channels_scaled_msg
  { time_boot_ms :: Stored Uint32
  ; chan1_scaled :: Stored Sint16
  ; chan2_scaled :: Stored Sint16
  ; chan3_scaled :: Stored Sint16
  ; chan4_scaled :: Stored Sint16
  ; chan5_scaled :: Stored Sint16
  ; chan6_scaled :: Stored Sint16
  ; chan7_scaled :: Stored Sint16
  ; chan8_scaled :: Stored Sint16
  ; port :: Stored Uint8
  ; rssi :: Stored Uint8
  }
|]

mkRcChannelsScaledSender ::
  Def ('[ ConstRef s0 (Struct "rc_channels_scaled_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRcChannelsScaledSender = makeMavlinkSender "rc_channels_scaled_msg" rcChannelsScaledMsgId rcChannelsScaledCrcExtra

instance MavlinkUnpackableMsg "rc_channels_scaled_msg" where
    unpackMsg = ( rcChannelsScaledUnpack , rcChannelsScaledMsgId )

rcChannelsScaledUnpack :: Def ('[ Ref s1 (Struct "rc_channels_scaled_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rcChannelsScaledUnpack = proc "mavlink_rc_channels_scaled_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

rcChannelsScaledWrapper :: WrappedPackRep (Struct "rc_channels_scaled_msg")
rcChannelsScaledWrapper = wrapPackRep "mavlink_rc_channels_scaled" $ packStruct
  [ packLabel time_boot_ms
  , packLabel chan1_scaled
  , packLabel chan2_scaled
  , packLabel chan3_scaled
  , packLabel chan4_scaled
  , packLabel chan5_scaled
  , packLabel chan6_scaled
  , packLabel chan7_scaled
  , packLabel chan8_scaled
  , packLabel port
  , packLabel rssi
  ]

instance Packable (Struct "rc_channels_scaled_msg") where
  packRep = wrappedPackRep rcChannelsScaledWrapper
