{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RcChannelsScaled where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

rcChannelsScaledMsgId :: Uint8
rcChannelsScaledMsgId = 34

rcChannelsScaledCrcExtra :: Uint8
rcChannelsScaledCrcExtra = 237

rcChannelsScaledModule :: Module
rcChannelsScaledModule = package "mavlink_rc_channels_scaled_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRcChannelsScaledSender
  incl rcChannelsScaledUnpack
  defStruct (Proxy :: Proxy "rc_channels_scaled_msg")
  incl rcChannelsScaledPackRef
  incl rcChannelsScaledUnpackRef

[ivory|
struct rc_channels_scaled_msg
  { time_boot_ms :: Stored Uint32
  ; chan1_scaled :: Stored Sint16
  ; chan2_scaled :: Stored Sint16
  ; chan3_scaled :: Stored Sint16
  ; chan4_scaled :: Stored Sint16
  ; chan5_scaled :: Stored Sint16
  ; chan6_scaled :: Stored Sint16
  ; chan7_scaled :: Stored Sint16
  ; chan8_scaled :: Stored Sint16
  ; port :: Stored Uint8
  ; rssi :: Stored Uint8
  }
|]

mkRcChannelsScaledSender ::
  Def ('[ ConstRef s0 (Struct "rc_channels_scaled_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRcChannelsScaledSender = makeMavlinkSender "rc_channels_scaled_msg" rcChannelsScaledMsgId rcChannelsScaledCrcExtra

instance MavlinkUnpackableMsg "rc_channels_scaled_msg" where
    unpackMsg = ( rcChannelsScaledUnpack , rcChannelsScaledMsgId )

rcChannelsScaledUnpack :: Def ('[ Ref s1 (Struct "rc_channels_scaled_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rcChannelsScaledUnpack = proc "mavlink_rc_channels_scaled_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

rcChannelsScaledPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "rc_channels_scaled_msg")
                              ] :-> () )
rcChannelsScaledPackRef = proc "mavlink_rc_channels_scaled_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> chan1_scaled)
  packRef buf (off + 6) (msg ~> chan2_scaled)
  packRef buf (off + 8) (msg ~> chan3_scaled)
  packRef buf (off + 10) (msg ~> chan4_scaled)
  packRef buf (off + 12) (msg ~> chan5_scaled)
  packRef buf (off + 14) (msg ~> chan6_scaled)
  packRef buf (off + 16) (msg ~> chan7_scaled)
  packRef buf (off + 18) (msg ~> chan8_scaled)
  packRef buf (off + 20) (msg ~> port)
  packRef buf (off + 21) (msg ~> rssi)

rcChannelsScaledUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "rc_channels_scaled_msg")
                                ] :-> () )
rcChannelsScaledUnpackRef = proc "mavlink_rc_channels_scaled_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> chan1_scaled)
  unpackRef buf (off + 6) (msg ~> chan2_scaled)
  unpackRef buf (off + 8) (msg ~> chan3_scaled)
  unpackRef buf (off + 10) (msg ~> chan4_scaled)
  unpackRef buf (off + 12) (msg ~> chan5_scaled)
  unpackRef buf (off + 14) (msg ~> chan6_scaled)
  unpackRef buf (off + 16) (msg ~> chan7_scaled)
  unpackRef buf (off + 18) (msg ~> chan8_scaled)
  unpackRef buf (off + 20) (msg ~> port)
  unpackRef buf (off + 21) (msg ~> rssi)

instance SerializableRef (Struct "rc_channels_scaled_msg") where
  packRef = call_ rcChannelsScaledPackRef
  unpackRef = call_ rcChannelsScaledUnpackRef
