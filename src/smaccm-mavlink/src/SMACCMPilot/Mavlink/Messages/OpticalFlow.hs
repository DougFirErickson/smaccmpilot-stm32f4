{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.OpticalFlow where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

opticalFlowMsgId :: Uint8
opticalFlowMsgId = 100

opticalFlowCrcExtra :: Uint8
opticalFlowCrcExtra = 175

opticalFlowModule :: Module
opticalFlowModule = package "mavlink_optical_flow_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkOpticalFlowSender
  incl opticalFlowUnpack
  defStruct (Proxy :: Proxy "optical_flow_msg")
  incl opticalFlowPackRef
  incl opticalFlowUnpackRef

[ivory|
struct optical_flow_msg
  { time_usec :: Stored Uint64
  ; flow_comp_m_x :: Stored IFloat
  ; flow_comp_m_y :: Stored IFloat
  ; ground_distance :: Stored IFloat
  ; flow_x :: Stored Sint16
  ; flow_y :: Stored Sint16
  ; sensor_id :: Stored Uint8
  ; quality :: Stored Uint8
  }
|]

mkOpticalFlowSender ::
  Def ('[ ConstRef s0 (Struct "optical_flow_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkOpticalFlowSender = makeMavlinkSender "optical_flow_msg" opticalFlowMsgId opticalFlowCrcExtra

instance MavlinkUnpackableMsg "optical_flow_msg" where
    unpackMsg = ( opticalFlowUnpack , opticalFlowMsgId )

opticalFlowUnpack :: Def ('[ Ref s1 (Struct "optical_flow_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
opticalFlowUnpack = proc "mavlink_optical_flow_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

opticalFlowPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "optical_flow_msg")
                              ] :-> () )
opticalFlowPackRef = proc "mavlink_optical_flow_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_usec)
  packRef buf (off + 8) (msg ~> flow_comp_m_x)
  packRef buf (off + 12) (msg ~> flow_comp_m_y)
  packRef buf (off + 16) (msg ~> ground_distance)
  packRef buf (off + 20) (msg ~> flow_x)
  packRef buf (off + 22) (msg ~> flow_y)
  packRef buf (off + 24) (msg ~> sensor_id)
  packRef buf (off + 25) (msg ~> quality)

opticalFlowUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "optical_flow_msg")
                                ] :-> () )
opticalFlowUnpackRef = proc "mavlink_optical_flow_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_usec)
  unpackRef buf (off + 8) (msg ~> flow_comp_m_x)
  unpackRef buf (off + 12) (msg ~> flow_comp_m_y)
  unpackRef buf (off + 16) (msg ~> ground_distance)
  unpackRef buf (off + 20) (msg ~> flow_x)
  unpackRef buf (off + 22) (msg ~> flow_y)
  unpackRef buf (off + 24) (msg ~> sensor_id)
  unpackRef buf (off + 25) (msg ~> quality)

instance SerializableRef (Struct "optical_flow_msg") where
  packRef = call_ opticalFlowPackRef
  unpackRef = call_ opticalFlowUnpackRef
