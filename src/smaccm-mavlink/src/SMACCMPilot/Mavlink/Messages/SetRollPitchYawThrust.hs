{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetRollPitchYawThrust where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

setRollPitchYawThrustMsgId :: Uint8
setRollPitchYawThrustMsgId = 56

setRollPitchYawThrustCrcExtra :: Uint8
setRollPitchYawThrustCrcExtra = 100

setRollPitchYawThrustModule :: Module
setRollPitchYawThrustModule = package "mavlink_set_roll_pitch_yaw_thrust_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSetRollPitchYawThrustSender
  incl setRollPitchYawThrustUnpack
  defStruct (Proxy :: Proxy "set_roll_pitch_yaw_thrust_msg")
  incl setRollPitchYawThrustPackRef
  incl setRollPitchYawThrustUnpackRef

[ivory|
struct set_roll_pitch_yaw_thrust_msg
  { roll :: Stored IFloat
  ; pitch :: Stored IFloat
  ; yaw :: Stored IFloat
  ; thrust :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkSetRollPitchYawThrustSender ::
  Def ('[ ConstRef s0 (Struct "set_roll_pitch_yaw_thrust_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetRollPitchYawThrustSender = makeMavlinkSender "set_roll_pitch_yaw_thrust_msg" setRollPitchYawThrustMsgId setRollPitchYawThrustCrcExtra

instance MavlinkUnpackableMsg "set_roll_pitch_yaw_thrust_msg" where
    unpackMsg = ( setRollPitchYawThrustUnpack , setRollPitchYawThrustMsgId )

setRollPitchYawThrustUnpack :: Def ('[ Ref s1 (Struct "set_roll_pitch_yaw_thrust_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setRollPitchYawThrustUnpack = proc "mavlink_set_roll_pitch_yaw_thrust_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

setRollPitchYawThrustPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "set_roll_pitch_yaw_thrust_msg")
                              ] :-> () )
setRollPitchYawThrustPackRef = proc "mavlink_set_roll_pitch_yaw_thrust_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> roll)
  packRef buf (off + 4) (msg ~> pitch)
  packRef buf (off + 8) (msg ~> yaw)
  packRef buf (off + 12) (msg ~> thrust)
  packRef buf (off + 16) (msg ~> target_system)
  packRef buf (off + 17) (msg ~> target_component)

setRollPitchYawThrustUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "set_roll_pitch_yaw_thrust_msg")
                                ] :-> () )
setRollPitchYawThrustUnpackRef = proc "mavlink_set_roll_pitch_yaw_thrust_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> roll)
  unpackRef buf (off + 4) (msg ~> pitch)
  unpackRef buf (off + 8) (msg ~> yaw)
  unpackRef buf (off + 12) (msg ~> thrust)
  unpackRef buf (off + 16) (msg ~> target_system)
  unpackRef buf (off + 17) (msg ~> target_component)

instance SerializableRef (Struct "set_roll_pitch_yaw_thrust_msg") where
  packRef = call_ setRollPitchYawThrustPackRef
  unpackRef = call_ setRollPitchYawThrustUnpackRef
