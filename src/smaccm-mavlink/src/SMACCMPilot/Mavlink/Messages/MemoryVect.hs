{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MemoryVect where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

memoryVectMsgId :: Uint8
memoryVectMsgId = 249

memoryVectCrcExtra :: Uint8
memoryVectCrcExtra = 204

memoryVectModule :: Module
memoryVectModule = package "mavlink_memory_vect_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMemoryVectSender
  incl memoryVectUnpack
  defStruct (Proxy :: Proxy "memory_vect_msg")
  incl memoryVectPackRef
  incl memoryVectUnpackRef

[ivory|
struct memory_vect_msg
  { address :: Stored Uint16
  ; ver :: Stored Uint8
  ; memory_vect_type :: Stored Uint8
  ; value :: Array 32 (Stored Sint8)
  }
|]

mkMemoryVectSender ::
  Def ('[ ConstRef s0 (Struct "memory_vect_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMemoryVectSender = makeMavlinkSender "memory_vect_msg" memoryVectMsgId memoryVectCrcExtra

instance MavlinkUnpackableMsg "memory_vect_msg" where
    unpackMsg = ( memoryVectUnpack , memoryVectMsgId )

memoryVectUnpack :: Def ('[ Ref s1 (Struct "memory_vect_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
memoryVectUnpack = proc "mavlink_memory_vect_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

memoryVectPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "memory_vect_msg")
                              ] :-> () )
memoryVectPackRef = proc "mavlink_memory_vect_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> address)
  packRef buf (off + 2) (msg ~> ver)
  packRef buf (off + 3) (msg ~> memory_vect_type)
  packRef buf (off + 4) (msg ~> value)

memoryVectUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "memory_vect_msg")
                                ] :-> () )
memoryVectUnpackRef = proc "mavlink_memory_vect_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> address)
  unpackRef buf (off + 2) (msg ~> ver)
  unpackRef buf (off + 3) (msg ~> memory_vect_type)
  unpackRef buf (off + 4) (msg ~> value)

instance SerializableRef (Struct "memory_vect_msg") where
  packRef = call_ memoryVectPackRef
  unpackRef = call_ memoryVectUnpackRef
