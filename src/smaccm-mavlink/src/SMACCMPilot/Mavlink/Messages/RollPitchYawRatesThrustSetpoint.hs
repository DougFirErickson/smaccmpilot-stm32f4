{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.RollPitchYawRatesThrustSetpoint where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

rollPitchYawRatesThrustSetpointMsgId :: Uint8
rollPitchYawRatesThrustSetpointMsgId = 80

rollPitchYawRatesThrustSetpointCrcExtra :: Uint8
rollPitchYawRatesThrustSetpointCrcExtra = 127

rollPitchYawRatesThrustSetpointModule :: Module
rollPitchYawRatesThrustSetpointModule = package "mavlink_roll_pitch_yaw_rates_thrust_setpoint_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRollPitchYawRatesThrustSetpointSender
  incl rollPitchYawRatesThrustSetpointUnpack
  defStruct (Proxy :: Proxy "roll_pitch_yaw_rates_thrust_setpoint_msg")
  incl rollPitchYawRatesThrustSetpointPackRef
  incl rollPitchYawRatesThrustSetpointUnpackRef

[ivory|
struct roll_pitch_yaw_rates_thrust_setpoint_msg
  { time_boot_ms :: Stored Uint32
  ; roll_rate :: Stored IFloat
  ; pitch_rate :: Stored IFloat
  ; yaw_rate :: Stored IFloat
  ; thrust :: Stored IFloat
  }
|]

mkRollPitchYawRatesThrustSetpointSender ::
  Def ('[ ConstRef s0 (Struct "roll_pitch_yaw_rates_thrust_setpoint_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRollPitchYawRatesThrustSetpointSender = makeMavlinkSender "roll_pitch_yaw_rates_thrust_setpoint_msg" rollPitchYawRatesThrustSetpointMsgId rollPitchYawRatesThrustSetpointCrcExtra

instance MavlinkUnpackableMsg "roll_pitch_yaw_rates_thrust_setpoint_msg" where
    unpackMsg = ( rollPitchYawRatesThrustSetpointUnpack , rollPitchYawRatesThrustSetpointMsgId )

rollPitchYawRatesThrustSetpointUnpack :: Def ('[ Ref s1 (Struct "roll_pitch_yaw_rates_thrust_setpoint_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rollPitchYawRatesThrustSetpointUnpack = proc "mavlink_roll_pitch_yaw_rates_thrust_setpoint_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

rollPitchYawRatesThrustSetpointPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "roll_pitch_yaw_rates_thrust_setpoint_msg")
                              ] :-> () )
rollPitchYawRatesThrustSetpointPackRef = proc "mavlink_roll_pitch_yaw_rates_thrust_setpoint_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> roll_rate)
  packRef buf (off + 8) (msg ~> pitch_rate)
  packRef buf (off + 12) (msg ~> yaw_rate)
  packRef buf (off + 16) (msg ~> thrust)

rollPitchYawRatesThrustSetpointUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "roll_pitch_yaw_rates_thrust_setpoint_msg")
                                ] :-> () )
rollPitchYawRatesThrustSetpointUnpackRef = proc "mavlink_roll_pitch_yaw_rates_thrust_setpoint_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> roll_rate)
  unpackRef buf (off + 8) (msg ~> pitch_rate)
  unpackRef buf (off + 12) (msg ~> yaw_rate)
  unpackRef buf (off + 16) (msg ~> thrust)

instance SerializableRef (Struct "roll_pitch_yaw_rates_thrust_setpoint_msg") where
  packRef = call_ rollPitchYawRatesThrustSetpointPackRef
  unpackRef = call_ rollPitchYawRatesThrustSetpointUnpackRef
