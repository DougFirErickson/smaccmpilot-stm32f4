{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetQuadMotorsSetpoint where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

setQuadMotorsSetpointMsgId :: Uint8
setQuadMotorsSetpointMsgId = 60

setQuadMotorsSetpointCrcExtra :: Uint8
setQuadMotorsSetpointCrcExtra = 30

setQuadMotorsSetpointModule :: Module
setQuadMotorsSetpointModule = package "mavlink_set_quad_motors_setpoint_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSetQuadMotorsSetpointSender
  incl setQuadMotorsSetpointUnpack
  defStruct (Proxy :: Proxy "set_quad_motors_setpoint_msg")
  incl setQuadMotorsSetpointPackRef
  incl setQuadMotorsSetpointUnpackRef

[ivory|
struct set_quad_motors_setpoint_msg
  { motor_front_nw :: Stored Uint16
  ; motor_right_ne :: Stored Uint16
  ; motor_back_se :: Stored Uint16
  ; motor_left_sw :: Stored Uint16
  ; target_system :: Stored Uint8
  }
|]

mkSetQuadMotorsSetpointSender ::
  Def ('[ ConstRef s0 (Struct "set_quad_motors_setpoint_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetQuadMotorsSetpointSender = makeMavlinkSender "set_quad_motors_setpoint_msg" setQuadMotorsSetpointMsgId setQuadMotorsSetpointCrcExtra

instance MavlinkUnpackableMsg "set_quad_motors_setpoint_msg" where
    unpackMsg = ( setQuadMotorsSetpointUnpack , setQuadMotorsSetpointMsgId )

setQuadMotorsSetpointUnpack :: Def ('[ Ref s1 (Struct "set_quad_motors_setpoint_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setQuadMotorsSetpointUnpack = proc "mavlink_set_quad_motors_setpoint_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

setQuadMotorsSetpointPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "set_quad_motors_setpoint_msg")
                              ] :-> () )
setQuadMotorsSetpointPackRef = proc "mavlink_set_quad_motors_setpoint_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> motor_front_nw)
  packRef buf (off + 2) (msg ~> motor_right_ne)
  packRef buf (off + 4) (msg ~> motor_back_se)
  packRef buf (off + 6) (msg ~> motor_left_sw)
  packRef buf (off + 8) (msg ~> target_system)

setQuadMotorsSetpointUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "set_quad_motors_setpoint_msg")
                                ] :-> () )
setQuadMotorsSetpointUnpackRef = proc "mavlink_set_quad_motors_setpoint_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> motor_front_nw)
  unpackRef buf (off + 2) (msg ~> motor_right_ne)
  unpackRef buf (off + 4) (msg ~> motor_back_se)
  unpackRef buf (off + 6) (msg ~> motor_left_sw)
  unpackRef buf (off + 8) (msg ~> target_system)

instance SerializableRef (Struct "set_quad_motors_setpoint_msg") where
  packRef = call_ setQuadMotorsSetpointPackRef
  unpackRef = call_ setQuadMotorsSetpointUnpackRef
