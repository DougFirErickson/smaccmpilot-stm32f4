{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.VfrHud where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

vfrHudMsgId :: Uint8
vfrHudMsgId = 74

vfrHudCrcExtra :: Uint8
vfrHudCrcExtra = 20

vfrHudModule :: Module
vfrHudModule = package "mavlink_vfr_hud_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkVfrHudSender
  incl vfrHudUnpack
  defStruct (Proxy :: Proxy "vfr_hud_msg")
  incl vfrHudPackRef
  incl vfrHudUnpackRef

[ivory|
struct vfr_hud_msg
  { airspeed :: Stored IFloat
  ; groundspeed :: Stored IFloat
  ; alt :: Stored IFloat
  ; climb :: Stored IFloat
  ; heading :: Stored Sint16
  ; throttle :: Stored Uint16
  }
|]

mkVfrHudSender ::
  Def ('[ ConstRef s0 (Struct "vfr_hud_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkVfrHudSender = makeMavlinkSender "vfr_hud_msg" vfrHudMsgId vfrHudCrcExtra

instance MavlinkUnpackableMsg "vfr_hud_msg" where
    unpackMsg = ( vfrHudUnpack , vfrHudMsgId )

vfrHudUnpack :: Def ('[ Ref s1 (Struct "vfr_hud_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
vfrHudUnpack = proc "mavlink_vfr_hud_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

vfrHudPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "vfr_hud_msg")
                              ] :-> () )
vfrHudPackRef = proc "mavlink_vfr_hud_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> airspeed)
  packRef buf (off + 4) (msg ~> groundspeed)
  packRef buf (off + 8) (msg ~> alt)
  packRef buf (off + 12) (msg ~> climb)
  packRef buf (off + 16) (msg ~> heading)
  packRef buf (off + 18) (msg ~> throttle)

vfrHudUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "vfr_hud_msg")
                                ] :-> () )
vfrHudUnpackRef = proc "mavlink_vfr_hud_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> airspeed)
  unpackRef buf (off + 4) (msg ~> groundspeed)
  unpackRef buf (off + 8) (msg ~> alt)
  unpackRef buf (off + 12) (msg ~> climb)
  unpackRef buf (off + 16) (msg ~> heading)
  unpackRef buf (off + 18) (msg ~> throttle)

instance SerializableRef (Struct "vfr_hud_msg") where
  packRef = call_ vfrHudPackRef
  unpackRef = call_ vfrHudUnpackRef
