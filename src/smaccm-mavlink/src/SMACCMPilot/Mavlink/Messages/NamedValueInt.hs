{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.NamedValueInt where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

namedValueIntMsgId :: Uint8
namedValueIntMsgId = 252

namedValueIntCrcExtra :: Uint8
namedValueIntCrcExtra = 44

namedValueIntModule :: Module
namedValueIntModule = package "mavlink_named_value_int_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkNamedValueIntSender
  incl namedValueIntUnpack
  defStruct (Proxy :: Proxy "named_value_int_msg")
  incl namedValueIntPackRef
  incl namedValueIntUnpackRef

[ivory|
struct named_value_int_msg
  { time_boot_ms :: Stored Uint32
  ; value :: Stored Sint32
  ; name :: Array 10 (Stored Uint8)
  }
|]

mkNamedValueIntSender ::
  Def ('[ ConstRef s0 (Struct "named_value_int_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkNamedValueIntSender = makeMavlinkSender "named_value_int_msg" namedValueIntMsgId namedValueIntCrcExtra

instance MavlinkUnpackableMsg "named_value_int_msg" where
    unpackMsg = ( namedValueIntUnpack , namedValueIntMsgId )

namedValueIntUnpack :: Def ('[ Ref s1 (Struct "named_value_int_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
namedValueIntUnpack = proc "mavlink_named_value_int_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

namedValueIntPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "named_value_int_msg")
                              ] :-> () )
namedValueIntPackRef = proc "mavlink_named_value_int_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> value)
  packRef buf (off + 8) (msg ~> name)

namedValueIntUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "named_value_int_msg")
                                ] :-> () )
namedValueIntUnpackRef = proc "mavlink_named_value_int_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> value)
  unpackRef buf (off + 8) (msg ~> name)

instance SerializableRef (Struct "named_value_int_msg") where
  packRef = call_ namedValueIntPackRef
  unpackRef = call_ namedValueIntUnpackRef
