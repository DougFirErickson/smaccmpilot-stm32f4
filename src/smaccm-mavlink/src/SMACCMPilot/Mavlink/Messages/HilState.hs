{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.HilState where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

hilStateMsgId :: Uint8
hilStateMsgId = 90

hilStateCrcExtra :: Uint8
hilStateCrcExtra = 183

hilStateModule :: Module
hilStateModule = package "mavlink_hil_state_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkHilStateSender
  incl hilStateUnpack
  defStruct (Proxy :: Proxy "hil_state_msg")
  incl hilStatePackRef
  incl hilStateUnpackRef

[ivory|
struct hil_state_msg
  { time_usec :: Stored Uint64
  ; roll :: Stored IFloat
  ; pitch :: Stored IFloat
  ; yaw :: Stored IFloat
  ; rollspeed :: Stored IFloat
  ; pitchspeed :: Stored IFloat
  ; yawspeed :: Stored IFloat
  ; lat :: Stored Sint32
  ; lon :: Stored Sint32
  ; alt :: Stored Sint32
  ; vx :: Stored Sint16
  ; vy :: Stored Sint16
  ; vz :: Stored Sint16
  ; xacc :: Stored Sint16
  ; yacc :: Stored Sint16
  ; zacc :: Stored Sint16
  }
|]

mkHilStateSender ::
  Def ('[ ConstRef s0 (Struct "hil_state_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkHilStateSender = makeMavlinkSender "hil_state_msg" hilStateMsgId hilStateCrcExtra

instance MavlinkUnpackableMsg "hil_state_msg" where
    unpackMsg = ( hilStateUnpack , hilStateMsgId )

hilStateUnpack :: Def ('[ Ref s1 (Struct "hil_state_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
hilStateUnpack = proc "mavlink_hil_state_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

hilStatePackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "hil_state_msg")
                              ] :-> () )
hilStatePackRef = proc "mavlink_hil_state_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_usec)
  packRef buf (off + 8) (msg ~> roll)
  packRef buf (off + 12) (msg ~> pitch)
  packRef buf (off + 16) (msg ~> yaw)
  packRef buf (off + 20) (msg ~> rollspeed)
  packRef buf (off + 24) (msg ~> pitchspeed)
  packRef buf (off + 28) (msg ~> yawspeed)
  packRef buf (off + 32) (msg ~> lat)
  packRef buf (off + 36) (msg ~> lon)
  packRef buf (off + 40) (msg ~> alt)
  packRef buf (off + 44) (msg ~> vx)
  packRef buf (off + 46) (msg ~> vy)
  packRef buf (off + 48) (msg ~> vz)
  packRef buf (off + 50) (msg ~> xacc)
  packRef buf (off + 52) (msg ~> yacc)
  packRef buf (off + 54) (msg ~> zacc)

hilStateUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "hil_state_msg")
                                ] :-> () )
hilStateUnpackRef = proc "mavlink_hil_state_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_usec)
  unpackRef buf (off + 8) (msg ~> roll)
  unpackRef buf (off + 12) (msg ~> pitch)
  unpackRef buf (off + 16) (msg ~> yaw)
  unpackRef buf (off + 20) (msg ~> rollspeed)
  unpackRef buf (off + 24) (msg ~> pitchspeed)
  unpackRef buf (off + 28) (msg ~> yawspeed)
  unpackRef buf (off + 32) (msg ~> lat)
  unpackRef buf (off + 36) (msg ~> lon)
  unpackRef buf (off + 40) (msg ~> alt)
  unpackRef buf (off + 44) (msg ~> vx)
  unpackRef buf (off + 46) (msg ~> vy)
  unpackRef buf (off + 48) (msg ~> vz)
  unpackRef buf (off + 50) (msg ~> xacc)
  unpackRef buf (off + 52) (msg ~> yacc)
  unpackRef buf (off + 54) (msg ~> zacc)

instance SerializableRef (Struct "hil_state_msg") where
  packRef = call_ hilStatePackRef
  unpackRef = call_ hilStateUnpackRef
