{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetRollPitchYawSpeedThrust where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

setRollPitchYawSpeedThrustMsgId :: Uint8
setRollPitchYawSpeedThrustMsgId = 57

setRollPitchYawSpeedThrustCrcExtra :: Uint8
setRollPitchYawSpeedThrustCrcExtra = 24

setRollPitchYawSpeedThrustModule :: Module
setRollPitchYawSpeedThrustModule = package "mavlink_set_roll_pitch_yaw_speed_thrust_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSetRollPitchYawSpeedThrustSender
  incl setRollPitchYawSpeedThrustUnpack
  defStruct (Proxy :: Proxy "set_roll_pitch_yaw_speed_thrust_msg")
  incl setRollPitchYawSpeedThrustPackRef
  incl setRollPitchYawSpeedThrustUnpackRef

[ivory|
struct set_roll_pitch_yaw_speed_thrust_msg
  { roll_speed :: Stored IFloat
  ; pitch_speed :: Stored IFloat
  ; yaw_speed :: Stored IFloat
  ; thrust :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkSetRollPitchYawSpeedThrustSender ::
  Def ('[ ConstRef s0 (Struct "set_roll_pitch_yaw_speed_thrust_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetRollPitchYawSpeedThrustSender = makeMavlinkSender "set_roll_pitch_yaw_speed_thrust_msg" setRollPitchYawSpeedThrustMsgId setRollPitchYawSpeedThrustCrcExtra

instance MavlinkUnpackableMsg "set_roll_pitch_yaw_speed_thrust_msg" where
    unpackMsg = ( setRollPitchYawSpeedThrustUnpack , setRollPitchYawSpeedThrustMsgId )

setRollPitchYawSpeedThrustUnpack :: Def ('[ Ref s1 (Struct "set_roll_pitch_yaw_speed_thrust_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setRollPitchYawSpeedThrustUnpack = proc "mavlink_set_roll_pitch_yaw_speed_thrust_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

setRollPitchYawSpeedThrustPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "set_roll_pitch_yaw_speed_thrust_msg")
                              ] :-> () )
setRollPitchYawSpeedThrustPackRef = proc "mavlink_set_roll_pitch_yaw_speed_thrust_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> roll_speed)
  packRef buf (off + 4) (msg ~> pitch_speed)
  packRef buf (off + 8) (msg ~> yaw_speed)
  packRef buf (off + 12) (msg ~> thrust)
  packRef buf (off + 16) (msg ~> target_system)
  packRef buf (off + 17) (msg ~> target_component)

setRollPitchYawSpeedThrustUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "set_roll_pitch_yaw_speed_thrust_msg")
                                ] :-> () )
setRollPitchYawSpeedThrustUnpackRef = proc "mavlink_set_roll_pitch_yaw_speed_thrust_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> roll_speed)
  unpackRef buf (off + 4) (msg ~> pitch_speed)
  unpackRef buf (off + 8) (msg ~> yaw_speed)
  unpackRef buf (off + 12) (msg ~> thrust)
  unpackRef buf (off + 16) (msg ~> target_system)
  unpackRef buf (off + 17) (msg ~> target_component)

instance SerializableRef (Struct "set_roll_pitch_yaw_speed_thrust_msg") where
  packRef = call_ setRollPitchYawSpeedThrustPackRef
  unpackRef = call_ setRollPitchYawSpeedThrustUnpackRef
