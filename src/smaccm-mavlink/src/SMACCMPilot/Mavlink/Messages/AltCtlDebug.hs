{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AltCtlDebug where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

altCtlDebugMsgId :: Uint8
altCtlDebugMsgId = 173

altCtlDebugCrcExtra :: Uint8
altCtlDebugCrcExtra = 130

altCtlDebugModule :: Module
altCtlDebugModule = package "mavlink_alt_ctl_debug_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkAltCtlDebugSender
  incl altCtlDebugUnpack
  defStruct (Proxy :: Proxy "alt_ctl_debug_msg")
  incl altCtlDebugPackRef
  incl altCtlDebugUnpackRef

[ivory|
struct alt_ctl_debug_msg
  { alt_est :: Stored IFloat
  ; alt_rate_est :: Stored IFloat
  ; thrust_p :: Stored IFloat
  ; thrust_i :: Stored IFloat
  ; thrust_d :: Stored IFloat
  ; thrust_i_reset :: Stored IFloat
  ; ui_setp :: Stored IFloat
  ; ui_rate_setp :: Stored IFloat
  ; pos_p :: Stored IFloat
  ; pos_i :: Stored IFloat
  ; pos_d :: Stored IFloat
  ; pos_setp :: Stored IFloat
  ; pos_rate_setp :: Stored IFloat
  }
|]

mkAltCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "alt_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAltCtlDebugSender = makeMavlinkSender "alt_ctl_debug_msg" altCtlDebugMsgId altCtlDebugCrcExtra

instance MavlinkUnpackableMsg "alt_ctl_debug_msg" where
    unpackMsg = ( altCtlDebugUnpack , altCtlDebugMsgId )

altCtlDebugUnpack :: Def ('[ Ref s1 (Struct "alt_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
altCtlDebugUnpack = proc "mavlink_alt_ctl_debug_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

altCtlDebugPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "alt_ctl_debug_msg")
                              ] :-> () )
altCtlDebugPackRef = proc "mavlink_alt_ctl_debug_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> alt_est)
  packRef buf (off + 4) (msg ~> alt_rate_est)
  packRef buf (off + 8) (msg ~> thrust_p)
  packRef buf (off + 12) (msg ~> thrust_i)
  packRef buf (off + 16) (msg ~> thrust_d)
  packRef buf (off + 20) (msg ~> thrust_i_reset)
  packRef buf (off + 24) (msg ~> ui_setp)
  packRef buf (off + 28) (msg ~> ui_rate_setp)
  packRef buf (off + 32) (msg ~> pos_p)
  packRef buf (off + 36) (msg ~> pos_i)
  packRef buf (off + 40) (msg ~> pos_d)
  packRef buf (off + 44) (msg ~> pos_setp)
  packRef buf (off + 48) (msg ~> pos_rate_setp)

altCtlDebugUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "alt_ctl_debug_msg")
                                ] :-> () )
altCtlDebugUnpackRef = proc "mavlink_alt_ctl_debug_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> alt_est)
  unpackRef buf (off + 4) (msg ~> alt_rate_est)
  unpackRef buf (off + 8) (msg ~> thrust_p)
  unpackRef buf (off + 12) (msg ~> thrust_i)
  unpackRef buf (off + 16) (msg ~> thrust_d)
  unpackRef buf (off + 20) (msg ~> thrust_i_reset)
  unpackRef buf (off + 24) (msg ~> ui_setp)
  unpackRef buf (off + 28) (msg ~> ui_rate_setp)
  unpackRef buf (off + 32) (msg ~> pos_p)
  unpackRef buf (off + 36) (msg ~> pos_i)
  unpackRef buf (off + 40) (msg ~> pos_d)
  unpackRef buf (off + 44) (msg ~> pos_setp)
  unpackRef buf (off + 48) (msg ~> pos_rate_setp)

instance SerializableRef (Struct "alt_ctl_debug_msg") where
  packRef = call_ altCtlDebugPackRef
  unpackRef = call_ altCtlDebugUnpackRef
