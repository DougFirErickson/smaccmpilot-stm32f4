{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ChangeOperatorControl where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

changeOperatorControlMsgId :: Uint8
changeOperatorControlMsgId = 5

changeOperatorControlCrcExtra :: Uint8
changeOperatorControlCrcExtra = 217

changeOperatorControlModule :: Module
changeOperatorControlModule = package "mavlink_change_operator_control_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkChangeOperatorControlSender
  incl changeOperatorControlUnpack
  defStruct (Proxy :: Proxy "change_operator_control_msg")
  incl changeOperatorControlPackRef
  incl changeOperatorControlUnpackRef

[ivory|
struct change_operator_control_msg
  { target_system :: Stored Uint8
  ; control_request :: Stored Uint8
  ; version :: Stored Uint8
  ; passkey :: Array 25 (Stored Uint8)
  }
|]

mkChangeOperatorControlSender ::
  Def ('[ ConstRef s0 (Struct "change_operator_control_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkChangeOperatorControlSender = makeMavlinkSender "change_operator_control_msg" changeOperatorControlMsgId changeOperatorControlCrcExtra

instance MavlinkUnpackableMsg "change_operator_control_msg" where
    unpackMsg = ( changeOperatorControlUnpack , changeOperatorControlMsgId )

changeOperatorControlUnpack :: Def ('[ Ref s1 (Struct "change_operator_control_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
changeOperatorControlUnpack = proc "mavlink_change_operator_control_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

changeOperatorControlPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "change_operator_control_msg")
                              ] :-> () )
changeOperatorControlPackRef = proc "mavlink_change_operator_control_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> target_system)
  packRef buf (off + 1) (msg ~> control_request)
  packRef buf (off + 2) (msg ~> version)
  packRef buf (off + 3) (msg ~> passkey)

changeOperatorControlUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "change_operator_control_msg")
                                ] :-> () )
changeOperatorControlUnpackRef = proc "mavlink_change_operator_control_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> target_system)
  unpackRef buf (off + 1) (msg ~> control_request)
  unpackRef buf (off + 2) (msg ~> version)
  unpackRef buf (off + 3) (msg ~> passkey)

instance SerializableRef (Struct "change_operator_control_msg") where
  packRef = call_ changeOperatorControlPackRef
  unpackRef = call_ changeOperatorControlUnpackRef
