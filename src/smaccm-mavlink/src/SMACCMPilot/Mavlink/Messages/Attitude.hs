{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Attitude where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

attitudeMsgId :: Uint8
attitudeMsgId = 30

attitudeCrcExtra :: Uint8
attitudeCrcExtra = 39

attitudeModule :: Module
attitudeModule = package "mavlink_attitude_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkAttitudeSender
  incl attitudeUnpack
  defStruct (Proxy :: Proxy "attitude_msg")
  incl attitudePackRef
  incl attitudeUnpackRef

[ivory|
struct attitude_msg
  { time_boot_ms :: Stored Uint32
  ; roll :: Stored IFloat
  ; pitch :: Stored IFloat
  ; yaw :: Stored IFloat
  ; rollspeed :: Stored IFloat
  ; pitchspeed :: Stored IFloat
  ; yawspeed :: Stored IFloat
  }
|]

mkAttitudeSender ::
  Def ('[ ConstRef s0 (Struct "attitude_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAttitudeSender = makeMavlinkSender "attitude_msg" attitudeMsgId attitudeCrcExtra

instance MavlinkUnpackableMsg "attitude_msg" where
    unpackMsg = ( attitudeUnpack , attitudeMsgId )

attitudeUnpack :: Def ('[ Ref s1 (Struct "attitude_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
attitudeUnpack = proc "mavlink_attitude_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

attitudePackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "attitude_msg")
                              ] :-> () )
attitudePackRef = proc "mavlink_attitude_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> roll)
  packRef buf (off + 8) (msg ~> pitch)
  packRef buf (off + 12) (msg ~> yaw)
  packRef buf (off + 16) (msg ~> rollspeed)
  packRef buf (off + 20) (msg ~> pitchspeed)
  packRef buf (off + 24) (msg ~> yawspeed)

attitudeUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "attitude_msg")
                                ] :-> () )
attitudeUnpackRef = proc "mavlink_attitude_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> roll)
  unpackRef buf (off + 8) (msg ~> pitch)
  unpackRef buf (off + 12) (msg ~> yaw)
  unpackRef buf (off + 16) (msg ~> rollspeed)
  unpackRef buf (off + 20) (msg ~> pitchspeed)
  unpackRef buf (off + 24) (msg ~> yawspeed)

instance SerializableRef (Struct "attitude_msg") where
  packRef = call_ attitudePackRef
  unpackRef = call_ attitudeUnpackRef
