{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Ping where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

pingMsgId :: Uint8
pingMsgId = 4

pingCrcExtra :: Uint8
pingCrcExtra = 237

pingModule :: Module
pingModule = package "mavlink_ping_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkPingSender
  incl pingUnpack
  defStruct (Proxy :: Proxy "ping_msg")
  incl pingPackRef
  incl pingUnpackRef

[ivory|
struct ping_msg
  { time_usec :: Stored Uint64
  ; ping_seq :: Stored Uint32
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkPingSender ::
  Def ('[ ConstRef s0 (Struct "ping_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkPingSender = makeMavlinkSender "ping_msg" pingMsgId pingCrcExtra

instance MavlinkUnpackableMsg "ping_msg" where
    unpackMsg = ( pingUnpack , pingMsgId )

pingUnpack :: Def ('[ Ref s1 (Struct "ping_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
pingUnpack = proc "mavlink_ping_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

pingPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "ping_msg")
                              ] :-> () )
pingPackRef = proc "mavlink_ping_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_usec)
  packRef buf (off + 8) (msg ~> ping_seq)
  packRef buf (off + 12) (msg ~> target_system)
  packRef buf (off + 13) (msg ~> target_component)

pingUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "ping_msg")
                                ] :-> () )
pingUnpackRef = proc "mavlink_ping_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_usec)
  unpackRef buf (off + 8) (msg ~> ping_seq)
  unpackRef buf (off + 12) (msg ~> target_system)
  unpackRef buf (off + 13) (msg ~> target_component)

instance SerializableRef (Struct "ping_msg") where
  packRef = call_ pingPackRef
  unpackRef = call_ pingUnpackRef
