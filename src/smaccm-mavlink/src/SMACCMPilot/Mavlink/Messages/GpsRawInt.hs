{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.GpsRawInt where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

gpsRawIntMsgId :: Uint8
gpsRawIntMsgId = 24

gpsRawIntCrcExtra :: Uint8
gpsRawIntCrcExtra = 24

gpsRawIntModule :: Module
gpsRawIntModule = package "mavlink_gps_raw_int_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkGpsRawIntSender
  incl gpsRawIntUnpack
  defStruct (Proxy :: Proxy "gps_raw_int_msg")
  incl gpsRawIntPackRef
  incl gpsRawIntUnpackRef

[ivory|
struct gps_raw_int_msg
  { time_usec :: Stored Uint64
  ; lat :: Stored Sint32
  ; lon :: Stored Sint32
  ; alt :: Stored Sint32
  ; eph :: Stored Uint16
  ; epv :: Stored Uint16
  ; vel :: Stored Uint16
  ; cog :: Stored Uint16
  ; fix_type :: Stored Uint8
  ; satellites_visible :: Stored Uint8
  }
|]

mkGpsRawIntSender ::
  Def ('[ ConstRef s0 (Struct "gps_raw_int_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkGpsRawIntSender = makeMavlinkSender "gps_raw_int_msg" gpsRawIntMsgId gpsRawIntCrcExtra

instance MavlinkUnpackableMsg "gps_raw_int_msg" where
    unpackMsg = ( gpsRawIntUnpack , gpsRawIntMsgId )

gpsRawIntUnpack :: Def ('[ Ref s1 (Struct "gps_raw_int_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
gpsRawIntUnpack = proc "mavlink_gps_raw_int_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

gpsRawIntPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "gps_raw_int_msg")
                              ] :-> () )
gpsRawIntPackRef = proc "mavlink_gps_raw_int_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_usec)
  packRef buf (off + 8) (msg ~> lat)
  packRef buf (off + 12) (msg ~> lon)
  packRef buf (off + 16) (msg ~> alt)
  packRef buf (off + 20) (msg ~> eph)
  packRef buf (off + 22) (msg ~> epv)
  packRef buf (off + 24) (msg ~> vel)
  packRef buf (off + 26) (msg ~> cog)
  packRef buf (off + 28) (msg ~> fix_type)
  packRef buf (off + 29) (msg ~> satellites_visible)

gpsRawIntUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "gps_raw_int_msg")
                                ] :-> () )
gpsRawIntUnpackRef = proc "mavlink_gps_raw_int_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_usec)
  unpackRef buf (off + 8) (msg ~> lat)
  unpackRef buf (off + 12) (msg ~> lon)
  unpackRef buf (off + 16) (msg ~> alt)
  unpackRef buf (off + 20) (msg ~> eph)
  unpackRef buf (off + 22) (msg ~> epv)
  unpackRef buf (off + 24) (msg ~> vel)
  unpackRef buf (off + 26) (msg ~> cog)
  unpackRef buf (off + 28) (msg ~> fix_type)
  unpackRef buf (off + 29) (msg ~> satellites_visible)

instance SerializableRef (Struct "gps_raw_int_msg") where
  packRef = call_ gpsRawIntPackRef
  unpackRef = call_ gpsRawIntUnpackRef
