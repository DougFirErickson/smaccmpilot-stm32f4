{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.NamedValueFloat where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

namedValueFloatMsgId :: Uint8
namedValueFloatMsgId = 251

namedValueFloatCrcExtra :: Uint8
namedValueFloatCrcExtra = 170

namedValueFloatModule :: Module
namedValueFloatModule = package "mavlink_named_value_float_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkNamedValueFloatSender
  incl namedValueFloatUnpack
  defStruct (Proxy :: Proxy "named_value_float_msg")
  incl namedValueFloatPackRef
  incl namedValueFloatUnpackRef

[ivory|
struct named_value_float_msg
  { time_boot_ms :: Stored Uint32
  ; value :: Stored IFloat
  ; name :: Array 10 (Stored Uint8)
  }
|]

mkNamedValueFloatSender ::
  Def ('[ ConstRef s0 (Struct "named_value_float_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkNamedValueFloatSender = makeMavlinkSender "named_value_float_msg" namedValueFloatMsgId namedValueFloatCrcExtra

instance MavlinkUnpackableMsg "named_value_float_msg" where
    unpackMsg = ( namedValueFloatUnpack , namedValueFloatMsgId )

namedValueFloatUnpack :: Def ('[ Ref s1 (Struct "named_value_float_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
namedValueFloatUnpack = proc "mavlink_named_value_float_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

namedValueFloatPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "named_value_float_msg")
                              ] :-> () )
namedValueFloatPackRef = proc "mavlink_named_value_float_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_boot_ms)
  packRef buf (off + 4) (msg ~> value)
  packRef buf (off + 8) (msg ~> name)

namedValueFloatUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "named_value_float_msg")
                                ] :-> () )
namedValueFloatUnpackRef = proc "mavlink_named_value_float_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_boot_ms)
  unpackRef buf (off + 4) (msg ~> value)
  unpackRef buf (off + 8) (msg ~> name)

instance SerializableRef (Struct "named_value_float_msg") where
  packRef = call_ namedValueFloatPackRef
  unpackRef = call_ namedValueFloatUnpackRef
