{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SystemTime where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

systemTimeMsgId :: Uint8
systemTimeMsgId = 2

systemTimeCrcExtra :: Uint8
systemTimeCrcExtra = 137

systemTimeModule :: Module
systemTimeModule = package "mavlink_system_time_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSystemTimeSender
  incl systemTimeUnpack
  defStruct (Proxy :: Proxy "system_time_msg")
  incl systemTimePackRef
  incl systemTimeUnpackRef

[ivory|
struct system_time_msg
  { time_unix_usec :: Stored Uint64
  ; time_boot_ms :: Stored Uint32
  }
|]

mkSystemTimeSender ::
  Def ('[ ConstRef s0 (Struct "system_time_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSystemTimeSender = makeMavlinkSender "system_time_msg" systemTimeMsgId systemTimeCrcExtra

instance MavlinkUnpackableMsg "system_time_msg" where
    unpackMsg = ( systemTimeUnpack , systemTimeMsgId )

systemTimeUnpack :: Def ('[ Ref s1 (Struct "system_time_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
systemTimeUnpack = proc "mavlink_system_time_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

systemTimePackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "system_time_msg")
                              ] :-> () )
systemTimePackRef = proc "mavlink_system_time_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_unix_usec)
  packRef buf (off + 8) (msg ~> time_boot_ms)

systemTimeUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "system_time_msg")
                                ] :-> () )
systemTimeUnpackRef = proc "mavlink_system_time_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_unix_usec)
  unpackRef buf (off + 8) (msg ~> time_boot_ms)

instance SerializableRef (Struct "system_time_msg") where
  packRef = call_ systemTimePackRef
  unpackRef = call_ systemTimeUnpackRef
