{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SysStatus where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

sysStatusMsgId :: Uint8
sysStatusMsgId = 1

sysStatusCrcExtra :: Uint8
sysStatusCrcExtra = 124

sysStatusModule :: Module
sysStatusModule = package "mavlink_sys_status_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSysStatusSender
  incl sysStatusUnpack
  defStruct (Proxy :: Proxy "sys_status_msg")
  incl sysStatusPackRef
  incl sysStatusUnpackRef

[ivory|
struct sys_status_msg
  { onboard_control_sensors_present :: Stored Uint32
  ; onboard_control_sensors_enabled :: Stored Uint32
  ; onboard_control_sensors_health :: Stored Uint32
  ; load :: Stored Uint16
  ; voltage_battery :: Stored Uint16
  ; current_battery :: Stored Sint16
  ; drop_rate_comm :: Stored Uint16
  ; errors_comm :: Stored Uint16
  ; errors_count1 :: Stored Uint16
  ; errors_count2 :: Stored Uint16
  ; errors_count3 :: Stored Uint16
  ; errors_count4 :: Stored Uint16
  ; battery_remaining :: Stored Sint8
  }
|]

mkSysStatusSender ::
  Def ('[ ConstRef s0 (Struct "sys_status_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSysStatusSender = makeMavlinkSender "sys_status_msg" sysStatusMsgId sysStatusCrcExtra

instance MavlinkUnpackableMsg "sys_status_msg" where
    unpackMsg = ( sysStatusUnpack , sysStatusMsgId )

sysStatusUnpack :: Def ('[ Ref s1 (Struct "sys_status_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
sysStatusUnpack = proc "mavlink_sys_status_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

sysStatusPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "sys_status_msg")
                              ] :-> () )
sysStatusPackRef = proc "mavlink_sys_status_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> onboard_control_sensors_present)
  packRef buf (off + 4) (msg ~> onboard_control_sensors_enabled)
  packRef buf (off + 8) (msg ~> onboard_control_sensors_health)
  packRef buf (off + 12) (msg ~> load)
  packRef buf (off + 14) (msg ~> voltage_battery)
  packRef buf (off + 16) (msg ~> current_battery)
  packRef buf (off + 18) (msg ~> drop_rate_comm)
  packRef buf (off + 20) (msg ~> errors_comm)
  packRef buf (off + 22) (msg ~> errors_count1)
  packRef buf (off + 24) (msg ~> errors_count2)
  packRef buf (off + 26) (msg ~> errors_count3)
  packRef buf (off + 28) (msg ~> errors_count4)
  packRef buf (off + 30) (msg ~> battery_remaining)

sysStatusUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "sys_status_msg")
                                ] :-> () )
sysStatusUnpackRef = proc "mavlink_sys_status_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> onboard_control_sensors_present)
  unpackRef buf (off + 4) (msg ~> onboard_control_sensors_enabled)
  unpackRef buf (off + 8) (msg ~> onboard_control_sensors_health)
  unpackRef buf (off + 12) (msg ~> load)
  unpackRef buf (off + 14) (msg ~> voltage_battery)
  unpackRef buf (off + 16) (msg ~> current_battery)
  unpackRef buf (off + 18) (msg ~> drop_rate_comm)
  unpackRef buf (off + 20) (msg ~> errors_comm)
  unpackRef buf (off + 22) (msg ~> errors_count1)
  unpackRef buf (off + 24) (msg ~> errors_count2)
  unpackRef buf (off + 26) (msg ~> errors_count3)
  unpackRef buf (off + 28) (msg ~> errors_count4)
  unpackRef buf (off + 30) (msg ~> battery_remaining)

instance SerializableRef (Struct "sys_status_msg") where
  packRef = call_ sysStatusPackRef
  unpackRef = call_ sysStatusUnpackRef
