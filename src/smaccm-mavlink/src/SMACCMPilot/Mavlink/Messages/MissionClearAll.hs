{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.MissionClearAll where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

missionClearAllMsgId :: Uint8
missionClearAllMsgId = 45

missionClearAllCrcExtra :: Uint8
missionClearAllCrcExtra = 232

missionClearAllModule :: Module
missionClearAllModule = package "mavlink_mission_clear_all_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionClearAllSender
  incl missionClearAllUnpack
  defStruct (Proxy :: Proxy "mission_clear_all_msg")
  incl missionClearAllPackRef
  incl missionClearAllUnpackRef

[ivory|
struct mission_clear_all_msg
  { target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkMissionClearAllSender ::
  Def ('[ ConstRef s0 (Struct "mission_clear_all_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionClearAllSender = makeMavlinkSender "mission_clear_all_msg" missionClearAllMsgId missionClearAllCrcExtra

instance MavlinkUnpackableMsg "mission_clear_all_msg" where
    unpackMsg = ( missionClearAllUnpack , missionClearAllMsgId )

missionClearAllUnpack :: Def ('[ Ref s1 (Struct "mission_clear_all_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionClearAllUnpack = proc "mavlink_mission_clear_all_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

missionClearAllPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "mission_clear_all_msg")
                              ] :-> () )
missionClearAllPackRef = proc "mavlink_mission_clear_all_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> target_system)
  packRef buf (off + 1) (msg ~> target_component)

missionClearAllUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "mission_clear_all_msg")
                                ] :-> () )
missionClearAllUnpackRef = proc "mavlink_mission_clear_all_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> target_system)
  unpackRef buf (off + 1) (msg ~> target_component)

instance SerializableRef (Struct "mission_clear_all_msg") where
  packRef = call_ missionClearAllPackRef
  unpackRef = call_ missionClearAllUnpackRef
