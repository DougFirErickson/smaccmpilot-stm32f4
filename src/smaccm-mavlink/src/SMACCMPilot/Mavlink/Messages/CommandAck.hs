{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.CommandAck where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

commandAckMsgId :: Uint8
commandAckMsgId = 77

commandAckCrcExtra :: Uint8
commandAckCrcExtra = 143

commandAckModule :: Module
commandAckModule = package "mavlink_command_ack_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkCommandAckSender
  incl commandAckUnpack
  defStruct (Proxy :: Proxy "command_ack_msg")
  incl commandAckPackRef
  incl commandAckUnpackRef

[ivory|
struct command_ack_msg
  { command :: Stored Uint16
  ; result :: Stored Uint8
  }
|]

mkCommandAckSender ::
  Def ('[ ConstRef s0 (Struct "command_ack_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkCommandAckSender = makeMavlinkSender "command_ack_msg" commandAckMsgId commandAckCrcExtra

instance MavlinkUnpackableMsg "command_ack_msg" where
    unpackMsg = ( commandAckUnpack , commandAckMsgId )

commandAckUnpack :: Def ('[ Ref s1 (Struct "command_ack_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
commandAckUnpack = proc "mavlink_command_ack_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

commandAckPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "command_ack_msg")
                              ] :-> () )
commandAckPackRef = proc "mavlink_command_ack_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> command)
  packRef buf (off + 2) (msg ~> result)

commandAckUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "command_ack_msg")
                                ] :-> () )
commandAckUnpackRef = proc "mavlink_command_ack_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> command)
  unpackRef buf (off + 2) (msg ~> result)

instance SerializableRef (Struct "command_ack_msg") where
  packRef = call_ commandAckPackRef
  unpackRef = call_ commandAckUnpackRef
