{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.DataStream where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

dataStreamMsgId :: Uint8
dataStreamMsgId = 67

dataStreamCrcExtra :: Uint8
dataStreamCrcExtra = 21

dataStreamModule :: Module
dataStreamModule = package "mavlink_data_stream_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkDataStreamSender
  incl dataStreamUnpack
  defStruct (Proxy :: Proxy "data_stream_msg")
  incl dataStreamPackRef
  incl dataStreamUnpackRef

[ivory|
struct data_stream_msg
  { message_rate :: Stored Uint16
  ; stream_id :: Stored Uint8
  ; on_off :: Stored Uint8
  }
|]

mkDataStreamSender ::
  Def ('[ ConstRef s0 (Struct "data_stream_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkDataStreamSender = makeMavlinkSender "data_stream_msg" dataStreamMsgId dataStreamCrcExtra

instance MavlinkUnpackableMsg "data_stream_msg" where
    unpackMsg = ( dataStreamUnpack , dataStreamMsgId )

dataStreamUnpack :: Def ('[ Ref s1 (Struct "data_stream_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
dataStreamUnpack = proc "mavlink_data_stream_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

dataStreamPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "data_stream_msg")
                              ] :-> () )
dataStreamPackRef = proc "mavlink_data_stream_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> message_rate)
  packRef buf (off + 2) (msg ~> stream_id)
  packRef buf (off + 3) (msg ~> on_off)

dataStreamUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "data_stream_msg")
                                ] :-> () )
dataStreamUnpackRef = proc "mavlink_data_stream_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> message_rate)
  unpackRef buf (off + 2) (msg ~> stream_id)
  unpackRef buf (off + 3) (msg ~> on_off)

instance SerializableRef (Struct "data_stream_msg") where
  packRef = call_ dataStreamPackRef
  unpackRef = call_ dataStreamUnpackRef
