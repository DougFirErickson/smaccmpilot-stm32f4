{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AttCtlDebug where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

attCtlDebugMsgId :: Uint8
attCtlDebugMsgId = 186

attCtlDebugCrcExtra :: Uint8
attCtlDebugCrcExtra = 187

attCtlDebugModule :: Module
attCtlDebugModule = package "mavlink_att_ctl_debug_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkAttCtlDebugSender
  incl attCtlDebugUnpack
  defStruct (Proxy :: Proxy "att_ctl_debug_msg")
  incl attCtlDebugPackRef
  incl attCtlDebugUnpackRef

[ivory|
struct att_ctl_debug_msg
  { head_setpt :: Stored IFloat
  ; head_rate_setpt :: Stored IFloat
  ; head_ctl_p :: Stored IFloat
  ; head_ctl_d :: Stored IFloat
  ; pitch_setpt :: Stored IFloat
  ; pitch_rate_setpt :: Stored IFloat
  ; roll_setpt :: Stored IFloat
  ; roll_rate_setpt :: Stored IFloat
  }
|]

mkAttCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "att_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAttCtlDebugSender = makeMavlinkSender "att_ctl_debug_msg" attCtlDebugMsgId attCtlDebugCrcExtra

instance MavlinkUnpackableMsg "att_ctl_debug_msg" where
    unpackMsg = ( attCtlDebugUnpack , attCtlDebugMsgId )

attCtlDebugUnpack :: Def ('[ Ref s1 (Struct "att_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
attCtlDebugUnpack = proc "mavlink_att_ctl_debug_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

attCtlDebugPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "att_ctl_debug_msg")
                              ] :-> () )
attCtlDebugPackRef = proc "mavlink_att_ctl_debug_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> head_setpt)
  packRef buf (off + 4) (msg ~> head_rate_setpt)
  packRef buf (off + 8) (msg ~> head_ctl_p)
  packRef buf (off + 12) (msg ~> head_ctl_d)
  packRef buf (off + 16) (msg ~> pitch_setpt)
  packRef buf (off + 20) (msg ~> pitch_rate_setpt)
  packRef buf (off + 24) (msg ~> roll_setpt)
  packRef buf (off + 28) (msg ~> roll_rate_setpt)

attCtlDebugUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "att_ctl_debug_msg")
                                ] :-> () )
attCtlDebugUnpackRef = proc "mavlink_att_ctl_debug_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> head_setpt)
  unpackRef buf (off + 4) (msg ~> head_rate_setpt)
  unpackRef buf (off + 8) (msg ~> head_ctl_p)
  unpackRef buf (off + 12) (msg ~> head_ctl_d)
  unpackRef buf (off + 16) (msg ~> pitch_setpt)
  unpackRef buf (off + 20) (msg ~> pitch_rate_setpt)
  unpackRef buf (off + 24) (msg ~> roll_setpt)
  unpackRef buf (off + 28) (msg ~> roll_rate_setpt)

instance SerializableRef (Struct "att_ctl_debug_msg") where
  packRef = call_ attCtlDebugPackRef
  unpackRef = call_ attCtlDebugUnpackRef
