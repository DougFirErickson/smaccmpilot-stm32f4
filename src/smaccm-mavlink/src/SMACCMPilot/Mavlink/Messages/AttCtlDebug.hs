{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.AttCtlDebug where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

attCtlDebugMsgId :: Uint8
attCtlDebugMsgId = 186

attCtlDebugCrcExtra :: Uint8
attCtlDebugCrcExtra = 187

attCtlDebugModule :: Module
attCtlDebugModule = package "mavlink_att_ctl_debug_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkAttCtlDebugSender
  incl attCtlDebugUnpack
  defStruct (Proxy :: Proxy "att_ctl_debug_msg")
  wrappedPackMod attCtlDebugWrapper

[ivory|
struct att_ctl_debug_msg
  { head_setpt :: Stored IFloat
  ; head_rate_setpt :: Stored IFloat
  ; head_ctl_p :: Stored IFloat
  ; head_ctl_d :: Stored IFloat
  ; pitch_setpt :: Stored IFloat
  ; pitch_rate_setpt :: Stored IFloat
  ; roll_setpt :: Stored IFloat
  ; roll_rate_setpt :: Stored IFloat
  }
|]

mkAttCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "att_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAttCtlDebugSender = makeMavlinkSender "att_ctl_debug_msg" attCtlDebugMsgId attCtlDebugCrcExtra

instance MavlinkUnpackableMsg "att_ctl_debug_msg" where
    unpackMsg = ( attCtlDebugUnpack , attCtlDebugMsgId )

attCtlDebugUnpack :: Def ('[ Ref s1 (Struct "att_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
attCtlDebugUnpack = proc "mavlink_att_ctl_debug_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

attCtlDebugWrapper :: WrappedPackRep (Struct "att_ctl_debug_msg")
attCtlDebugWrapper = wrapPackRep "mavlink_att_ctl_debug" $ packStruct
  [ packLabel head_setpt
  , packLabel head_rate_setpt
  , packLabel head_ctl_p
  , packLabel head_ctl_d
  , packLabel pitch_setpt
  , packLabel pitch_rate_setpt
  , packLabel roll_setpt
  , packLabel roll_rate_setpt
  ]

instance Packable (Struct "att_ctl_debug_msg") where
  packRep = wrappedPackRep attCtlDebugWrapper
