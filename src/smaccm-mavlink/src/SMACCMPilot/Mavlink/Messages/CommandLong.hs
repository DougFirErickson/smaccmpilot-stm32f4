{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.CommandLong where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

commandLongMsgId :: Uint8
commandLongMsgId = 76

commandLongCrcExtra :: Uint8
commandLongCrcExtra = 152

commandLongModule :: Module
commandLongModule = package "mavlink_command_long_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkCommandLongSender
  incl commandLongUnpack
  defStruct (Proxy :: Proxy "command_long_msg")
  wrappedPackMod commandLongWrapper

[ivory|
struct command_long_msg
  { param1 :: Stored IFloat
  ; param2 :: Stored IFloat
  ; param3 :: Stored IFloat
  ; param4 :: Stored IFloat
  ; param5 :: Stored IFloat
  ; param6 :: Stored IFloat
  ; param7 :: Stored IFloat
  ; command :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; confirmation :: Stored Uint8
  }
|]

mkCommandLongSender ::
  Def ('[ ConstRef s0 (Struct "command_long_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkCommandLongSender = makeMavlinkSender "command_long_msg" commandLongMsgId commandLongCrcExtra

instance MavlinkUnpackableMsg "command_long_msg" where
    unpackMsg = ( commandLongUnpack , commandLongMsgId )

commandLongUnpack :: Def ('[ Ref s1 (Struct "command_long_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
commandLongUnpack = proc "mavlink_command_long_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

commandLongWrapper :: WrappedPackRep (Struct "command_long_msg")
commandLongWrapper = wrapPackRep "mavlink_command_long" $ packStruct
  [ packLabel param1
  , packLabel param2
  , packLabel param3
  , packLabel param4
  , packLabel param5
  , packLabel param6
  , packLabel param7
  , packLabel command
  , packLabel target_system
  , packLabel target_component
  , packLabel confirmation
  ]

instance Packable (Struct "command_long_msg") where
  packRep = wrappedPackRep commandLongWrapper
