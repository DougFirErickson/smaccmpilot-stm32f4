{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.HilControls where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

hilControlsMsgId :: Uint8
hilControlsMsgId = 91

hilControlsCrcExtra :: Uint8
hilControlsCrcExtra = 63

hilControlsModule :: Module
hilControlsModule = package "mavlink_hil_controls_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkHilControlsSender
  incl hilControlsUnpack
  defStruct (Proxy :: Proxy "hil_controls_msg")
  incl hilControlsPackRef
  incl hilControlsUnpackRef

[ivory|
struct hil_controls_msg
  { time_usec :: Stored Uint64
  ; roll_ailerons :: Stored IFloat
  ; pitch_elevator :: Stored IFloat
  ; yaw_rudder :: Stored IFloat
  ; throttle :: Stored IFloat
  ; aux1 :: Stored IFloat
  ; aux2 :: Stored IFloat
  ; aux3 :: Stored IFloat
  ; aux4 :: Stored IFloat
  ; mode :: Stored Uint8
  ; nav_mode :: Stored Uint8
  }
|]

mkHilControlsSender ::
  Def ('[ ConstRef s0 (Struct "hil_controls_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkHilControlsSender = makeMavlinkSender "hil_controls_msg" hilControlsMsgId hilControlsCrcExtra

instance MavlinkUnpackableMsg "hil_controls_msg" where
    unpackMsg = ( hilControlsUnpack , hilControlsMsgId )

hilControlsUnpack :: Def ('[ Ref s1 (Struct "hil_controls_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
hilControlsUnpack = proc "mavlink_hil_controls_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

hilControlsPackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "hil_controls_msg")
                              ] :-> () )
hilControlsPackRef = proc "mavlink_hil_controls_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> time_usec)
  packRef buf (off + 8) (msg ~> roll_ailerons)
  packRef buf (off + 12) (msg ~> pitch_elevator)
  packRef buf (off + 16) (msg ~> yaw_rudder)
  packRef buf (off + 20) (msg ~> throttle)
  packRef buf (off + 24) (msg ~> aux1)
  packRef buf (off + 28) (msg ~> aux2)
  packRef buf (off + 32) (msg ~> aux3)
  packRef buf (off + 36) (msg ~> aux4)
  packRef buf (off + 40) (msg ~> mode)
  packRef buf (off + 41) (msg ~> nav_mode)

hilControlsUnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "hil_controls_msg")
                                ] :-> () )
hilControlsUnpackRef = proc "mavlink_hil_controls_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> time_usec)
  unpackRef buf (off + 8) (msg ~> roll_ailerons)
  unpackRef buf (off + 12) (msg ~> pitch_elevator)
  unpackRef buf (off + 16) (msg ~> yaw_rudder)
  unpackRef buf (off + 20) (msg ~> throttle)
  unpackRef buf (off + 24) (msg ~> aux1)
  unpackRef buf (off + 28) (msg ~> aux2)
  unpackRef buf (off + 32) (msg ~> aux3)
  unpackRef buf (off + 36) (msg ~> aux4)
  unpackRef buf (off + 40) (msg ~> mode)
  unpackRef buf (off + 41) (msg ~> nav_mode)

instance SerializableRef (Struct "hil_controls_msg") where
  packRef = call_ hilControlsPackRef
  unpackRef = call_ hilControlsUnpackRef
