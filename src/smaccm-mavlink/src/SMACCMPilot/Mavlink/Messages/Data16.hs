{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.Data16 where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

data16MsgId :: Uint8
data16MsgId = 169

data16CrcExtra :: Uint8
data16CrcExtra = 46

data16Module :: Module
data16Module = package "mavlink_data16_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkData16Sender
  incl data16Unpack
  defStruct (Proxy :: Proxy "data16_msg")
  incl data16PackRef
  incl data16UnpackRef

[ivory|
struct data16_msg
  { data16_type :: Stored Uint8
  ; len :: Stored Uint8
  ; data16 :: Array 16 (Stored Uint8)
  }
|]

mkData16Sender ::
  Def ('[ ConstRef s0 (Struct "data16_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkData16Sender = makeMavlinkSender "data16_msg" data16MsgId data16CrcExtra

instance MavlinkUnpackableMsg "data16_msg" where
    unpackMsg = ( data16Unpack , data16MsgId )

data16Unpack :: Def ('[ Ref s1 (Struct "data16_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
data16Unpack = proc "mavlink_data16_unpack" $ \ msg buf -> body $ unpackRef buf 0 msg

data16PackRef :: Def ('[ Ref s1 (CArray (Stored Uint8))
                              , Uint32
                              , ConstRef s2 (Struct "data16_msg")
                              ] :-> () )
data16PackRef = proc "mavlink_data16_pack_ref" $ \ buf off msg -> body $ do
  packRef buf (off + 0) (msg ~> data16_type)
  packRef buf (off + 1) (msg ~> len)
  packRef buf (off + 2) (msg ~> data16)

data16UnpackRef :: Def ('[ ConstRef s1 (CArray (Stored Uint8))
                                , Uint32
                                , Ref s2 (Struct "data16_msg")
                                ] :-> () )
data16UnpackRef = proc "mavlink_data16_unpack_ref" $ \ buf off msg -> body $ do
  unpackRef buf (off + 0) (msg ~> data16_type)
  unpackRef buf (off + 1) (msg ~> len)
  unpackRef buf (off + 2) (msg ~> data16)

instance SerializableRef (Struct "data16_msg") where
  packRef = call_ data16PackRef
  unpackRef = call_ data16UnpackRef
