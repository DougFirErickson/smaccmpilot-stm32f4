{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.BatteryStatus where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

batteryStatusMsgId :: Uint8
batteryStatusMsgId = 147

batteryStatusCrcExtra :: Uint8
batteryStatusCrcExtra = 42

batteryStatusModule :: Module
batteryStatusModule = package "mavlink_battery_status_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkBatteryStatusSender
  incl batteryStatusUnpack
  defStruct (Proxy :: Proxy "battery_status_msg")
  wrappedPackMod batteryStatusWrapper

[ivory|
struct battery_status_msg
  { voltage_cell_1 :: Stored Uint16
  ; voltage_cell_2 :: Stored Uint16
  ; voltage_cell_3 :: Stored Uint16
  ; voltage_cell_4 :: Stored Uint16
  ; voltage_cell_5 :: Stored Uint16
  ; voltage_cell_6 :: Stored Uint16
  ; current_battery :: Stored Sint16
  ; accu_id :: Stored Uint8
  ; battery_remaining :: Stored Sint8
  }
|]

mkBatteryStatusSender ::
  Def ('[ ConstRef s0 (Struct "battery_status_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkBatteryStatusSender = makeMavlinkSender "battery_status_msg" batteryStatusMsgId batteryStatusCrcExtra

instance MavlinkUnpackableMsg "battery_status_msg" where
    unpackMsg = ( batteryStatusUnpack , batteryStatusMsgId )

batteryStatusUnpack :: Def ('[ Ref s1 (Struct "battery_status_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
batteryStatusUnpack = proc "mavlink_battery_status_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

batteryStatusWrapper :: WrappedPackRep (Struct "battery_status_msg")
batteryStatusWrapper = wrapPackRep "mavlink_battery_status" $ packStruct
  [ packLabel voltage_cell_1
  , packLabel voltage_cell_2
  , packLabel voltage_cell_3
  , packLabel voltage_cell_4
  , packLabel voltage_cell_5
  , packLabel voltage_cell_6
  , packLabel current_battery
  , packLabel accu_id
  , packLabel battery_remaining
  ]

instance Packable (Struct "battery_status_msg") where
  packRep = wrappedPackRep batteryStatusWrapper
