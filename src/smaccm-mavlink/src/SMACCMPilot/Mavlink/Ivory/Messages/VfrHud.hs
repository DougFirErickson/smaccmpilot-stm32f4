{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.VfrHud where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

vfrHudMsgId :: Uint8
vfrHudMsgId = 74

vfrHudCrcExtra :: Uint8
vfrHudCrcExtra = 20

vfrHudModule :: Module
vfrHudModule = package "mavlink_vfr_hud_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkVfrHudSender
  incl vfrHudUnpack
  defStruct (Proxy :: Proxy "vfr_hud_msg")
  wrappedPackMod vfrHudWrapper

[ivory|
struct vfr_hud_msg
  { airspeed :: Stored IFloat
  ; groundspeed :: Stored IFloat
  ; alt :: Stored IFloat
  ; climb :: Stored IFloat
  ; heading :: Stored Sint16
  ; throttle :: Stored Uint16
  }
|]

mkVfrHudSender ::
  Def ('[ ConstRef s0 (Struct "vfr_hud_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkVfrHudSender = makeMavlinkSender "vfr_hud_msg" vfrHudMsgId vfrHudCrcExtra

instance MavlinkUnpackableMsg "vfr_hud_msg" where
    unpackMsg = ( vfrHudUnpack , vfrHudMsgId )

vfrHudUnpack :: Def ('[ Ref s1 (Struct "vfr_hud_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
vfrHudUnpack = proc "mavlink_vfr_hud_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

vfrHudWrapper :: WrappedPackRep (Struct "vfr_hud_msg")
vfrHudWrapper = wrapPackRep "mavlink_vfr_hud" $ packStruct
  [ packLabel airspeed
  , packLabel groundspeed
  , packLabel alt
  , packLabel climb
  , packLabel heading
  , packLabel throttle
  ]

instance Packable (Struct "vfr_hud_msg") where
  packRep = wrappedPackRep vfrHudWrapper
