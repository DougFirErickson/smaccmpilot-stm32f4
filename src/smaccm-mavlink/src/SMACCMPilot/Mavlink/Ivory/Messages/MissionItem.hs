{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.MissionItem where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

missionItemMsgId :: Uint8
missionItemMsgId = 39

missionItemCrcExtra :: Uint8
missionItemCrcExtra = 254

missionItemModule :: Module
missionItemModule = package "mavlink_mission_item_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionItemSender
  incl missionItemUnpack
  defStruct (Proxy :: Proxy "mission_item_msg")
  wrappedPackMod missionItemWrapper

[ivory|
struct mission_item_msg
  { param1 :: Stored IFloat
  ; param2 :: Stored IFloat
  ; param3 :: Stored IFloat
  ; param4 :: Stored IFloat
  ; x :: Stored IFloat
  ; y :: Stored IFloat
  ; z :: Stored IFloat
  ; mission_item_seq :: Stored Uint16
  ; command :: Stored Uint16
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; frame :: Stored Uint8
  ; current :: Stored Uint8
  ; autocontinue :: Stored Uint8
  }
|]

mkMissionItemSender ::
  Def ('[ ConstRef s0 (Struct "mission_item_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionItemSender = makeMavlinkSender "mission_item_msg" missionItemMsgId missionItemCrcExtra

instance MavlinkUnpackableMsg "mission_item_msg" where
    unpackMsg = ( missionItemUnpack , missionItemMsgId )

missionItemUnpack :: Def ('[ Ref s1 (Struct "mission_item_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionItemUnpack = proc "mavlink_mission_item_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

missionItemWrapper :: WrappedPackRep (Struct "mission_item_msg")
missionItemWrapper = wrapPackRep "mavlink_mission_item" $ packStruct
  [ packLabel param1
  , packLabel param2
  , packLabel param3
  , packLabel param4
  , packLabel x
  , packLabel y
  , packLabel z
  , packLabel mission_item_seq
  , packLabel command
  , packLabel target_system
  , packLabel target_component
  , packLabel frame
  , packLabel current
  , packLabel autocontinue
  ]

instance Packable (Struct "mission_item_msg") where
  packRep = wrappedPackRep missionItemWrapper
