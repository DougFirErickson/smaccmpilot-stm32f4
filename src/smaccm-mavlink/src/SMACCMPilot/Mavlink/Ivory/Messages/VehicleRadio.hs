{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.VehicleRadio where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

vehicleRadioMsgId :: Uint8
vehicleRadioMsgId = 174

vehicleRadioCrcExtra :: Uint8
vehicleRadioCrcExtra = 238

vehicleRadioModule :: Module
vehicleRadioModule = package "mavlink_vehicle_radio_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkVehicleRadioSender
  incl vehicleRadioUnpack
  defStruct (Proxy :: Proxy "vehicle_radio_msg")
  wrappedPackMod vehicleRadioWrapper

[ivory|
struct vehicle_radio_msg
  { rxerrors :: Stored Uint16
  ; fixed :: Stored Uint16
  ; rssi :: Stored Uint8
  ; remrssi :: Stored Uint8
  ; txbuf :: Stored Uint8
  ; noise :: Stored Uint8
  ; remnoise :: Stored Uint8
  }
|]

mkVehicleRadioSender ::
  Def ('[ ConstRef s0 (Struct "vehicle_radio_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkVehicleRadioSender = makeMavlinkSender "vehicle_radio_msg" vehicleRadioMsgId vehicleRadioCrcExtra

instance MavlinkUnpackableMsg "vehicle_radio_msg" where
    unpackMsg = ( vehicleRadioUnpack , vehicleRadioMsgId )

vehicleRadioUnpack :: Def ('[ Ref s1 (Struct "vehicle_radio_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
vehicleRadioUnpack = proc "mavlink_vehicle_radio_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

vehicleRadioWrapper :: WrappedPackRep (Struct "vehicle_radio_msg")
vehicleRadioWrapper = wrapPackRep "mavlink_vehicle_radio" $ packStruct
  [ packLabel rxerrors
  , packLabel fixed
  , packLabel rssi
  , packLabel remrssi
  , packLabel txbuf
  , packLabel noise
  , packLabel remnoise
  ]

instance Packable (Struct "vehicle_radio_msg") where
  packRep = wrappedPackRep vehicleRadioWrapper
