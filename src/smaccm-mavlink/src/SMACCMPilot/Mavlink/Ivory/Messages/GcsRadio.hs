{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.GcsRadio where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

gcsRadioMsgId :: Uint8
gcsRadioMsgId = 175

gcsRadioCrcExtra :: Uint8
gcsRadioCrcExtra = 108

gcsRadioModule :: Module
gcsRadioModule = package "mavlink_gcs_radio_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkGcsRadioSender
  incl gcsRadioUnpack
  defStruct (Proxy :: Proxy "gcs_radio_msg")
  wrappedPackMod gcsRadioWrapper

[ivory|
struct gcs_radio_msg
  { rxerrors :: Stored Uint16
  ; fixed :: Stored Uint16
  ; rssi :: Stored Uint8
  ; remrssi :: Stored Uint8
  ; txbuf :: Stored Uint8
  ; noise :: Stored Uint8
  ; remnoise :: Stored Uint8
  }
|]

mkGcsRadioSender ::
  Def ('[ ConstRef s0 (Struct "gcs_radio_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkGcsRadioSender = makeMavlinkSender "gcs_radio_msg" gcsRadioMsgId gcsRadioCrcExtra

instance MavlinkUnpackableMsg "gcs_radio_msg" where
    unpackMsg = ( gcsRadioUnpack , gcsRadioMsgId )

gcsRadioUnpack :: Def ('[ Ref s1 (Struct "gcs_radio_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
gcsRadioUnpack = proc "mavlink_gcs_radio_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

gcsRadioWrapper :: WrappedPackRep (Struct "gcs_radio_msg")
gcsRadioWrapper = wrapPackRep "mavlink_gcs_radio" $ packStruct
  [ packLabel rxerrors
  , packLabel fixed
  , packLabel rssi
  , packLabel remrssi
  , packLabel txbuf
  , packLabel noise
  , packLabel remnoise
  ]

instance Packable (Struct "gcs_radio_msg") where
  packRep = wrappedPackRep gcsRadioWrapper
