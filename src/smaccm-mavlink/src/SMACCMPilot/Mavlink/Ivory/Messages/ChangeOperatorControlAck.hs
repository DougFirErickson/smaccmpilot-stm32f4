{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ChangeOperatorControlAck where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

changeOperatorControlAckMsgId :: Uint8
changeOperatorControlAckMsgId = 6

changeOperatorControlAckCrcExtra :: Uint8
changeOperatorControlAckCrcExtra = 104

changeOperatorControlAckModule :: Module
changeOperatorControlAckModule = package "mavlink_change_operator_control_ack_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkChangeOperatorControlAckSender
  incl changeOperatorControlAckUnpack
  defStruct (Proxy :: Proxy "change_operator_control_ack_msg")
  wrappedPackMod changeOperatorControlAckWrapper

[ivory|
struct change_operator_control_ack_msg
  { gcs_system_id :: Stored Uint8
  ; control_request :: Stored Uint8
  ; ack :: Stored Uint8
  }
|]

mkChangeOperatorControlAckSender ::
  Def ('[ ConstRef s0 (Struct "change_operator_control_ack_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkChangeOperatorControlAckSender = makeMavlinkSender "change_operator_control_ack_msg" changeOperatorControlAckMsgId changeOperatorControlAckCrcExtra

instance MavlinkUnpackableMsg "change_operator_control_ack_msg" where
    unpackMsg = ( changeOperatorControlAckUnpack , changeOperatorControlAckMsgId )

changeOperatorControlAckUnpack :: Def ('[ Ref s1 (Struct "change_operator_control_ack_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
changeOperatorControlAckUnpack = proc "mavlink_change_operator_control_ack_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

changeOperatorControlAckWrapper :: WrappedPackRep (Struct "change_operator_control_ack_msg")
changeOperatorControlAckWrapper = wrapPackRep "mavlink_change_operator_control_ack" $ packStruct
  [ packLabel gcs_system_id
  , packLabel control_request
  , packLabel ack
  ]

instance Packable (Struct "change_operator_control_ack_msg") where
  packRep = wrappedPackRep changeOperatorControlAckWrapper
