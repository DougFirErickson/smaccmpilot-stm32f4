{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.OmnidirectionalFlow where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

omnidirectionalFlowMsgId :: Uint8
omnidirectionalFlowMsgId = 106

omnidirectionalFlowCrcExtra :: Uint8
omnidirectionalFlowCrcExtra = 211

omnidirectionalFlowModule :: Module
omnidirectionalFlowModule = package "mavlink_omnidirectional_flow_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkOmnidirectionalFlowSender
  incl omnidirectionalFlowUnpack
  defStruct (Proxy :: Proxy "omnidirectional_flow_msg")
  wrappedPackMod omnidirectionalFlowWrapper

[ivory|
struct omnidirectional_flow_msg
  { time_usec :: Stored Uint64
  ; front_distance_m :: Stored IFloat
  ; left :: Array 10 (Stored Sint16)
  ; right :: Array 10 (Stored Sint16)
  ; sensor_id :: Stored Uint8
  ; quality :: Stored Uint8
  }
|]

mkOmnidirectionalFlowSender ::
  Def ('[ ConstRef s0 (Struct "omnidirectional_flow_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkOmnidirectionalFlowSender = makeMavlinkSender "omnidirectional_flow_msg" omnidirectionalFlowMsgId omnidirectionalFlowCrcExtra

instance MavlinkUnpackableMsg "omnidirectional_flow_msg" where
    unpackMsg = ( omnidirectionalFlowUnpack , omnidirectionalFlowMsgId )

omnidirectionalFlowUnpack :: Def ('[ Ref s1 (Struct "omnidirectional_flow_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
omnidirectionalFlowUnpack = proc "mavlink_omnidirectional_flow_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

omnidirectionalFlowWrapper :: WrappedPackRep (Struct "omnidirectional_flow_msg")
omnidirectionalFlowWrapper = wrapPackRep "mavlink_omnidirectional_flow" $ packStruct
  [ packLabel time_usec
  , packLabel front_distance_m
  , packLabel left
  , packLabel right
  , packLabel sensor_id
  , packLabel quality
  ]

instance Packable (Struct "omnidirectional_flow_msg") where
  packRep = wrappedPackRep omnidirectionalFlowWrapper
