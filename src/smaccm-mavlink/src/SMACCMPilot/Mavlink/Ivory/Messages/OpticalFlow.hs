{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.OpticalFlow where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

opticalFlowMsgId :: Uint8
opticalFlowMsgId = 100

opticalFlowCrcExtra :: Uint8
opticalFlowCrcExtra = 175

opticalFlowModule :: Module
opticalFlowModule = package "mavlink_optical_flow_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkOpticalFlowSender
  incl opticalFlowUnpack
  defStruct (Proxy :: Proxy "optical_flow_msg")
  wrappedPackMod opticalFlowWrapper

[ivory|
struct optical_flow_msg
  { time_usec :: Stored Uint64
  ; flow_comp_m_x :: Stored IFloat
  ; flow_comp_m_y :: Stored IFloat
  ; ground_distance :: Stored IFloat
  ; flow_x :: Stored Sint16
  ; flow_y :: Stored Sint16
  ; sensor_id :: Stored Uint8
  ; quality :: Stored Uint8
  }
|]

mkOpticalFlowSender ::
  Def ('[ ConstRef s0 (Struct "optical_flow_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkOpticalFlowSender = makeMavlinkSender "optical_flow_msg" opticalFlowMsgId opticalFlowCrcExtra

instance MavlinkUnpackableMsg "optical_flow_msg" where
    unpackMsg = ( opticalFlowUnpack , opticalFlowMsgId )

opticalFlowUnpack :: Def ('[ Ref s1 (Struct "optical_flow_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
opticalFlowUnpack = proc "mavlink_optical_flow_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

opticalFlowWrapper :: WrappedPackRep (Struct "optical_flow_msg")
opticalFlowWrapper = wrapPackRep "mavlink_optical_flow" $ packStruct
  [ packLabel time_usec
  , packLabel flow_comp_m_x
  , packLabel flow_comp_m_y
  , packLabel ground_distance
  , packLabel flow_x
  , packLabel flow_y
  , packLabel sensor_id
  , packLabel quality
  ]

instance Packable (Struct "optical_flow_msg") where
  packRep = wrappedPackRep opticalFlowWrapper
