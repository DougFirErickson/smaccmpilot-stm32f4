{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ParamSet where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

paramSetMsgId :: Uint8
paramSetMsgId = 23

paramSetCrcExtra :: Uint8
paramSetCrcExtra = 168

paramSetModule :: Module
paramSetModule = package "mavlink_param_set_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkParamSetSender
  incl paramSetUnpack
  defStruct (Proxy :: Proxy "param_set_msg")
  wrappedPackMod paramSetWrapper

[ivory|
struct param_set_msg
  { param_value :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  ; param_id :: Array 16 (Stored Uint8)
  ; param_type :: Stored Uint8
  }
|]

mkParamSetSender ::
  Def ('[ ConstRef s0 (Struct "param_set_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkParamSetSender = makeMavlinkSender "param_set_msg" paramSetMsgId paramSetCrcExtra

instance MavlinkUnpackableMsg "param_set_msg" where
    unpackMsg = ( paramSetUnpack , paramSetMsgId )

paramSetUnpack :: Def ('[ Ref s1 (Struct "param_set_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
paramSetUnpack = proc "mavlink_param_set_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

paramSetWrapper :: WrappedPackRep (Struct "param_set_msg")
paramSetWrapper = wrapPackRep "mavlink_param_set" $ packStruct
  [ packLabel param_value
  , packLabel target_system
  , packLabel target_component
  , packLabel param_id
  , packLabel param_type
  ]

instance Packable (Struct "param_set_msg") where
  packRep = wrappedPackRep paramSetWrapper
