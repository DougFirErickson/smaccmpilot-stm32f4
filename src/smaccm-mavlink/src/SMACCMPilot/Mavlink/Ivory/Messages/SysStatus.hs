{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.SysStatus where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

sysStatusMsgId :: Uint8
sysStatusMsgId = 1

sysStatusCrcExtra :: Uint8
sysStatusCrcExtra = 124

sysStatusModule :: Module
sysStatusModule = package "mavlink_sys_status_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSysStatusSender
  incl sysStatusUnpack
  defStruct (Proxy :: Proxy "sys_status_msg")
  wrappedPackMod sysStatusWrapper

[ivory|
struct sys_status_msg
  { onboard_control_sensors_present :: Stored Uint32
  ; onboard_control_sensors_enabled :: Stored Uint32
  ; onboard_control_sensors_health :: Stored Uint32
  ; load :: Stored Uint16
  ; voltage_battery :: Stored Uint16
  ; current_battery :: Stored Sint16
  ; drop_rate_comm :: Stored Uint16
  ; errors_comm :: Stored Uint16
  ; errors_count1 :: Stored Uint16
  ; errors_count2 :: Stored Uint16
  ; errors_count3 :: Stored Uint16
  ; errors_count4 :: Stored Uint16
  ; battery_remaining :: Stored Sint8
  }
|]

mkSysStatusSender ::
  Def ('[ ConstRef s0 (Struct "sys_status_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSysStatusSender = makeMavlinkSender "sys_status_msg" sysStatusMsgId sysStatusCrcExtra

instance MavlinkUnpackableMsg "sys_status_msg" where
    unpackMsg = ( sysStatusUnpack , sysStatusMsgId )

sysStatusUnpack :: Def ('[ Ref s1 (Struct "sys_status_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
sysStatusUnpack = proc "mavlink_sys_status_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

sysStatusWrapper :: WrappedPackRep (Struct "sys_status_msg")
sysStatusWrapper = wrapPackRep "mavlink_sys_status" $ packStruct
  [ packLabel onboard_control_sensors_present
  , packLabel onboard_control_sensors_enabled
  , packLabel onboard_control_sensors_health
  , packLabel load
  , packLabel voltage_battery
  , packLabel current_battery
  , packLabel drop_rate_comm
  , packLabel errors_comm
  , packLabel errors_count1
  , packLabel errors_count2
  , packLabel errors_count3
  , packLabel errors_count4
  , packLabel battery_remaining
  ]

instance Packable (Struct "sys_status_msg") where
  packRep = wrappedPackRep sysStatusWrapper
