{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.AltCtlDebug where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

altCtlDebugMsgId :: Uint8
altCtlDebugMsgId = 173

altCtlDebugCrcExtra :: Uint8
altCtlDebugCrcExtra = 130

altCtlDebugModule :: Module
altCtlDebugModule = package "mavlink_alt_ctl_debug_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkAltCtlDebugSender
  incl altCtlDebugUnpack
  defStruct (Proxy :: Proxy "alt_ctl_debug_msg")
  wrappedPackMod altCtlDebugWrapper

[ivory|
struct alt_ctl_debug_msg
  { alt_est :: Stored IFloat
  ; alt_rate_est :: Stored IFloat
  ; thrust_p :: Stored IFloat
  ; thrust_i :: Stored IFloat
  ; thrust_d :: Stored IFloat
  ; thrust_i_reset :: Stored IFloat
  ; ui_setp :: Stored IFloat
  ; ui_rate_setp :: Stored IFloat
  ; pos_p :: Stored IFloat
  ; pos_i :: Stored IFloat
  ; pos_d :: Stored IFloat
  ; pos_setp :: Stored IFloat
  ; pos_rate_setp :: Stored IFloat
  }
|]

mkAltCtlDebugSender ::
  Def ('[ ConstRef s0 (Struct "alt_ctl_debug_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAltCtlDebugSender = makeMavlinkSender "alt_ctl_debug_msg" altCtlDebugMsgId altCtlDebugCrcExtra

instance MavlinkUnpackableMsg "alt_ctl_debug_msg" where
    unpackMsg = ( altCtlDebugUnpack , altCtlDebugMsgId )

altCtlDebugUnpack :: Def ('[ Ref s1 (Struct "alt_ctl_debug_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
altCtlDebugUnpack = proc "mavlink_alt_ctl_debug_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

altCtlDebugWrapper :: WrappedPackRep (Struct "alt_ctl_debug_msg")
altCtlDebugWrapper = wrapPackRep "mavlink_alt_ctl_debug" $ packStruct
  [ packLabel alt_est
  , packLabel alt_rate_est
  , packLabel thrust_p
  , packLabel thrust_i
  , packLabel thrust_d
  , packLabel thrust_i_reset
  , packLabel ui_setp
  , packLabel ui_rate_setp
  , packLabel pos_p
  , packLabel pos_i
  , packLabel pos_d
  , packLabel pos_setp
  , packLabel pos_rate_setp
  ]

instance Packable (Struct "alt_ctl_debug_msg") where
  packRep = wrappedPackRep altCtlDebugWrapper
