{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SmaccmpilotNavCmd where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

smaccmpilotNavCmdMsgId :: Uint8
smaccmpilotNavCmdMsgId = 188

smaccmpilotNavCmdCrcExtra :: Uint8
smaccmpilotNavCmdCrcExtra = 96

smaccmpilotNavCmdModule :: Module
smaccmpilotNavCmdModule = package "mavlink_smaccmpilot_nav_cmd_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSmaccmpilotNavCmdSender
  incl smaccmpilotNavCmdUnpack
  defStruct (Proxy :: Proxy "smaccmpilot_nav_cmd_msg")
  wrappedPackMod smaccmpilotNavCmdWrapper

[ivory|
struct smaccmpilot_nav_cmd_msg
  { alt_set :: Stored Sint32
  ; alt_rate_set :: Stored Sint32
  ; lat_set :: Stored Sint32
  ; lon_set :: Stored Sint32
  ; vel_x_set :: Stored Sint32
  ; vel_y_set :: Stored Sint32
  ; heading_set :: Stored Uint16
  ; autoland_active :: Stored Sint8
  ; autoland_complete :: Stored Sint8
  ; alt_set_valid :: Stored Sint8
  ; heading_set_valid :: Stored Sint8
  ; lat_lon_set_valid :: Stored Sint8
  ; vel_set_valid :: Stored Sint8
  }
|]

mkSmaccmpilotNavCmdSender ::
  Def ('[ ConstRef s0 (Struct "smaccmpilot_nav_cmd_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSmaccmpilotNavCmdSender = makeMavlinkSender "smaccmpilot_nav_cmd_msg" smaccmpilotNavCmdMsgId smaccmpilotNavCmdCrcExtra

instance MavlinkUnpackableMsg "smaccmpilot_nav_cmd_msg" where
    unpackMsg = ( smaccmpilotNavCmdUnpack , smaccmpilotNavCmdMsgId )

smaccmpilotNavCmdUnpack :: Def ('[ Ref s1 (Struct "smaccmpilot_nav_cmd_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
smaccmpilotNavCmdUnpack = proc "mavlink_smaccmpilot_nav_cmd_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

smaccmpilotNavCmdWrapper :: WrappedPackRep (Struct "smaccmpilot_nav_cmd_msg")
smaccmpilotNavCmdWrapper = wrapPackRep "mavlink_smaccmpilot_nav_cmd" $ packStruct
  [ packLabel alt_set
  , packLabel alt_rate_set
  , packLabel lat_set
  , packLabel lon_set
  , packLabel vel_x_set
  , packLabel vel_y_set
  , packLabel heading_set
  , packLabel autoland_active
  , packLabel autoland_complete
  , packLabel alt_set_valid
  , packLabel heading_set_valid
  , packLabel lat_lon_set_valid
  , packLabel vel_set_valid
  ]

instance Packable (Struct "smaccmpilot_nav_cmd_msg") where
  packRep = wrappedPackRep smaccmpilotNavCmdWrapper
