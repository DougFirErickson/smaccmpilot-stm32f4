{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.MissionCurrent where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

missionCurrentMsgId :: Uint8
missionCurrentMsgId = 42

missionCurrentCrcExtra :: Uint8
missionCurrentCrcExtra = 28

missionCurrentModule :: Module
missionCurrentModule = package "mavlink_mission_current_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkMissionCurrentSender
  incl missionCurrentUnpack
  defStruct (Proxy :: Proxy "mission_current_msg")
  wrappedPackMod missionCurrentWrapper

[ivory|
struct mission_current_msg
  { mission_current_seq :: Stored Uint16
  }
|]

mkMissionCurrentSender ::
  Def ('[ ConstRef s0 (Struct "mission_current_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkMissionCurrentSender = makeMavlinkSender "mission_current_msg" missionCurrentMsgId missionCurrentCrcExtra

instance MavlinkUnpackableMsg "mission_current_msg" where
    unpackMsg = ( missionCurrentUnpack , missionCurrentMsgId )

missionCurrentUnpack :: Def ('[ Ref s1 (Struct "mission_current_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
missionCurrentUnpack = proc "mavlink_mission_current_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

missionCurrentWrapper :: WrappedPackRep (Struct "mission_current_msg")
missionCurrentWrapper = wrapPackRep "mavlink_mission_current" $ packStruct
  [ packLabel mission_current_seq
  ]

instance Packable (Struct "mission_current_msg") where
  packRep = wrappedPackRep missionCurrentWrapper
