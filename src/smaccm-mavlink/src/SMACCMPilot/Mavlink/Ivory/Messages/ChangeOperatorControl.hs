{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.ChangeOperatorControl where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

changeOperatorControlMsgId :: Uint8
changeOperatorControlMsgId = 5

changeOperatorControlCrcExtra :: Uint8
changeOperatorControlCrcExtra = 217

changeOperatorControlModule :: Module
changeOperatorControlModule = package "mavlink_change_operator_control_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkChangeOperatorControlSender
  incl changeOperatorControlUnpack
  defStruct (Proxy :: Proxy "change_operator_control_msg")
  wrappedPackMod changeOperatorControlWrapper

[ivory|
struct change_operator_control_msg
  { target_system :: Stored Uint8
  ; control_request :: Stored Uint8
  ; version :: Stored Uint8
  ; passkey :: Array 25 (Stored Uint8)
  }
|]

mkChangeOperatorControlSender ::
  Def ('[ ConstRef s0 (Struct "change_operator_control_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkChangeOperatorControlSender = makeMavlinkSender "change_operator_control_msg" changeOperatorControlMsgId changeOperatorControlCrcExtra

instance MavlinkUnpackableMsg "change_operator_control_msg" where
    unpackMsg = ( changeOperatorControlUnpack , changeOperatorControlMsgId )

changeOperatorControlUnpack :: Def ('[ Ref s1 (Struct "change_operator_control_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
changeOperatorControlUnpack = proc "mavlink_change_operator_control_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

changeOperatorControlWrapper :: WrappedPackRep (Struct "change_operator_control_msg")
changeOperatorControlWrapper = wrapPackRep "mavlink_change_operator_control" $ packStruct
  [ packLabel target_system
  , packLabel control_request
  , packLabel version
  , packLabel passkey
  ]

instance Packable (Struct "change_operator_control_msg") where
  packRep = wrappedPackRep changeOperatorControlWrapper
