{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.DebugVect where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

debugVectMsgId :: Uint8
debugVectMsgId = 250

debugVectCrcExtra :: Uint8
debugVectCrcExtra = 49

debugVectModule :: Module
debugVectModule = package "mavlink_debug_vect_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkDebugVectSender
  incl debugVectUnpack
  defStruct (Proxy :: Proxy "debug_vect_msg")
  wrappedPackMod debugVectWrapper

[ivory|
struct debug_vect_msg
  { time_usec :: Stored Uint64
  ; x :: Stored IFloat
  ; y :: Stored IFloat
  ; z :: Stored IFloat
  ; name :: Array 10 (Stored Uint8)
  }
|]

mkDebugVectSender ::
  Def ('[ ConstRef s0 (Struct "debug_vect_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkDebugVectSender = makeMavlinkSender "debug_vect_msg" debugVectMsgId debugVectCrcExtra

instance MavlinkUnpackableMsg "debug_vect_msg" where
    unpackMsg = ( debugVectUnpack , debugVectMsgId )

debugVectUnpack :: Def ('[ Ref s1 (Struct "debug_vect_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
debugVectUnpack = proc "mavlink_debug_vect_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

debugVectWrapper :: WrappedPackRep (Struct "debug_vect_msg")
debugVectWrapper = wrapPackRep "mavlink_debug_vect" $ packStruct
  [ packLabel time_usec
  , packLabel x
  , packLabel y
  , packLabel z
  , packLabel name
  ]

instance Packable (Struct "debug_vect_msg") where
  packRep = wrappedPackRep debugVectWrapper
