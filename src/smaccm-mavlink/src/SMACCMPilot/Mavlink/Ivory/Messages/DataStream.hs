{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.DataStream where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

dataStreamMsgId :: Uint8
dataStreamMsgId = 67

dataStreamCrcExtra :: Uint8
dataStreamCrcExtra = 21

dataStreamModule :: Module
dataStreamModule = package "mavlink_data_stream_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkDataStreamSender
  incl dataStreamUnpack
  defStruct (Proxy :: Proxy "data_stream_msg")
  wrappedPackMod dataStreamWrapper

[ivory|
struct data_stream_msg
  { message_rate :: Stored Uint16
  ; stream_id :: Stored Uint8
  ; on_off :: Stored Uint8
  }
|]

mkDataStreamSender ::
  Def ('[ ConstRef s0 (Struct "data_stream_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkDataStreamSender = makeMavlinkSender "data_stream_msg" dataStreamMsgId dataStreamCrcExtra

instance MavlinkUnpackableMsg "data_stream_msg" where
    unpackMsg = ( dataStreamUnpack , dataStreamMsgId )

dataStreamUnpack :: Def ('[ Ref s1 (Struct "data_stream_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
dataStreamUnpack = proc "mavlink_data_stream_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

dataStreamWrapper :: WrappedPackRep (Struct "data_stream_msg")
dataStreamWrapper = wrapPackRep "mavlink_data_stream" $ packStruct
  [ packLabel message_rate
  , packLabel stream_id
  , packLabel on_off
  ]

instance Packable (Struct "data_stream_msg") where
  packRep = wrappedPackRep dataStreamWrapper
