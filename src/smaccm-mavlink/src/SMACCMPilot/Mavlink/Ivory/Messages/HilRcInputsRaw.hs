{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.HilRcInputsRaw where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

hilRcInputsRawMsgId :: Uint8
hilRcInputsRawMsgId = 92

hilRcInputsRawCrcExtra :: Uint8
hilRcInputsRawCrcExtra = 54

hilRcInputsRawModule :: Module
hilRcInputsRawModule = package "mavlink_hil_rc_inputs_raw_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkHilRcInputsRawSender
  incl hilRcInputsRawUnpack
  defStruct (Proxy :: Proxy "hil_rc_inputs_raw_msg")
  wrappedPackMod hilRcInputsRawWrapper

[ivory|
struct hil_rc_inputs_raw_msg
  { time_usec :: Stored Uint64
  ; chan1_raw :: Stored Uint16
  ; chan2_raw :: Stored Uint16
  ; chan3_raw :: Stored Uint16
  ; chan4_raw :: Stored Uint16
  ; chan5_raw :: Stored Uint16
  ; chan6_raw :: Stored Uint16
  ; chan7_raw :: Stored Uint16
  ; chan8_raw :: Stored Uint16
  ; chan9_raw :: Stored Uint16
  ; chan10_raw :: Stored Uint16
  ; chan11_raw :: Stored Uint16
  ; chan12_raw :: Stored Uint16
  ; rssi :: Stored Uint8
  }
|]

mkHilRcInputsRawSender ::
  Def ('[ ConstRef s0 (Struct "hil_rc_inputs_raw_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkHilRcInputsRawSender = makeMavlinkSender "hil_rc_inputs_raw_msg" hilRcInputsRawMsgId hilRcInputsRawCrcExtra

instance MavlinkUnpackableMsg "hil_rc_inputs_raw_msg" where
    unpackMsg = ( hilRcInputsRawUnpack , hilRcInputsRawMsgId )

hilRcInputsRawUnpack :: Def ('[ Ref s1 (Struct "hil_rc_inputs_raw_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
hilRcInputsRawUnpack = proc "mavlink_hil_rc_inputs_raw_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

hilRcInputsRawWrapper :: WrappedPackRep (Struct "hil_rc_inputs_raw_msg")
hilRcInputsRawWrapper = wrapPackRep "mavlink_hil_rc_inputs_raw" $ packStruct
  [ packLabel time_usec
  , packLabel chan1_raw
  , packLabel chan2_raw
  , packLabel chan3_raw
  , packLabel chan4_raw
  , packLabel chan5_raw
  , packLabel chan6_raw
  , packLabel chan7_raw
  , packLabel chan8_raw
  , packLabel chan9_raw
  , packLabel chan10_raw
  , packLabel chan11_raw
  , packLabel chan12_raw
  , packLabel rssi
  ]

instance Packable (Struct "hil_rc_inputs_raw_msg") where
  packRep = wrappedPackRep hilRcInputsRawWrapper
