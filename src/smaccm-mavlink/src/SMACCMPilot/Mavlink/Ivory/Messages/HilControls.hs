{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.HilControls where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

hilControlsMsgId :: Uint8
hilControlsMsgId = 91

hilControlsCrcExtra :: Uint8
hilControlsCrcExtra = 63

hilControlsModule :: Module
hilControlsModule = package "mavlink_hil_controls_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkHilControlsSender
  incl hilControlsUnpack
  defStruct (Proxy :: Proxy "hil_controls_msg")
  wrappedPackMod hilControlsWrapper

[ivory|
struct hil_controls_msg
  { time_usec :: Stored Uint64
  ; roll_ailerons :: Stored IFloat
  ; pitch_elevator :: Stored IFloat
  ; yaw_rudder :: Stored IFloat
  ; throttle :: Stored IFloat
  ; aux1 :: Stored IFloat
  ; aux2 :: Stored IFloat
  ; aux3 :: Stored IFloat
  ; aux4 :: Stored IFloat
  ; mode :: Stored Uint8
  ; nav_mode :: Stored Uint8
  }
|]

mkHilControlsSender ::
  Def ('[ ConstRef s0 (Struct "hil_controls_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkHilControlsSender = makeMavlinkSender "hil_controls_msg" hilControlsMsgId hilControlsCrcExtra

instance MavlinkUnpackableMsg "hil_controls_msg" where
    unpackMsg = ( hilControlsUnpack , hilControlsMsgId )

hilControlsUnpack :: Def ('[ Ref s1 (Struct "hil_controls_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
hilControlsUnpack = proc "mavlink_hil_controls_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

hilControlsWrapper :: WrappedPackRep (Struct "hil_controls_msg")
hilControlsWrapper = wrapPackRep "mavlink_hil_controls" $ packStruct
  [ packLabel time_usec
  , packLabel roll_ailerons
  , packLabel pitch_elevator
  , packLabel yaw_rudder
  , packLabel throttle
  , packLabel aux1
  , packLabel aux2
  , packLabel aux3
  , packLabel aux4
  , packLabel mode
  , packLabel nav_mode
  ]

instance Packable (Struct "hil_controls_msg") where
  packRep = wrappedPackRep hilControlsWrapper
