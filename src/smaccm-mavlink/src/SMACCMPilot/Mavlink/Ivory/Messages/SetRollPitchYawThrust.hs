{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.SetRollPitchYawThrust where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

setRollPitchYawThrustMsgId :: Uint8
setRollPitchYawThrustMsgId = 56

setRollPitchYawThrustCrcExtra :: Uint8
setRollPitchYawThrustCrcExtra = 100

setRollPitchYawThrustModule :: Module
setRollPitchYawThrustModule = package "mavlink_set_roll_pitch_yaw_thrust_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkSetRollPitchYawThrustSender
  incl setRollPitchYawThrustUnpack
  defStruct (Proxy :: Proxy "set_roll_pitch_yaw_thrust_msg")
  wrappedPackMod setRollPitchYawThrustWrapper

[ivory|
struct set_roll_pitch_yaw_thrust_msg
  { roll :: Stored IFloat
  ; pitch :: Stored IFloat
  ; yaw :: Stored IFloat
  ; thrust :: Stored IFloat
  ; target_system :: Stored Uint8
  ; target_component :: Stored Uint8
  }
|]

mkSetRollPitchYawThrustSender ::
  Def ('[ ConstRef s0 (Struct "set_roll_pitch_yaw_thrust_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkSetRollPitchYawThrustSender = makeMavlinkSender "set_roll_pitch_yaw_thrust_msg" setRollPitchYawThrustMsgId setRollPitchYawThrustCrcExtra

instance MavlinkUnpackableMsg "set_roll_pitch_yaw_thrust_msg" where
    unpackMsg = ( setRollPitchYawThrustUnpack , setRollPitchYawThrustMsgId )

setRollPitchYawThrustUnpack :: Def ('[ Ref s1 (Struct "set_roll_pitch_yaw_thrust_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
setRollPitchYawThrustUnpack = proc "mavlink_set_roll_pitch_yaw_thrust_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

setRollPitchYawThrustWrapper :: WrappedPackRep (Struct "set_roll_pitch_yaw_thrust_msg")
setRollPitchYawThrustWrapper = wrapPackRep "mavlink_set_roll_pitch_yaw_thrust" $ packStruct
  [ packLabel roll
  , packLabel pitch
  , packLabel yaw
  , packLabel thrust
  , packLabel target_system
  , packLabel target_component
  ]

instance Packable (Struct "set_roll_pitch_yaw_thrust_msg") where
  packRep = wrappedPackRep setRollPitchYawThrustWrapper
