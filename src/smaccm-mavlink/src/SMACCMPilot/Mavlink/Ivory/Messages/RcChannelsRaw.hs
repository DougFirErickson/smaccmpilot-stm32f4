{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.RcChannelsRaw where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

rcChannelsRawMsgId :: Uint8
rcChannelsRawMsgId = 35

rcChannelsRawCrcExtra :: Uint8
rcChannelsRawCrcExtra = 244

rcChannelsRawModule :: Module
rcChannelsRawModule = package "mavlink_rc_channels_raw_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkRcChannelsRawSender
  incl rcChannelsRawUnpack
  defStruct (Proxy :: Proxy "rc_channels_raw_msg")
  wrappedPackMod rcChannelsRawWrapper

[ivory|
struct rc_channels_raw_msg
  { time_boot_ms :: Stored Uint32
  ; chan1_raw :: Stored Uint16
  ; chan2_raw :: Stored Uint16
  ; chan3_raw :: Stored Uint16
  ; chan4_raw :: Stored Uint16
  ; chan5_raw :: Stored Uint16
  ; chan6_raw :: Stored Uint16
  ; chan7_raw :: Stored Uint16
  ; chan8_raw :: Stored Uint16
  ; port :: Stored Uint8
  ; rssi :: Stored Uint8
  }
|]

mkRcChannelsRawSender ::
  Def ('[ ConstRef s0 (Struct "rc_channels_raw_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkRcChannelsRawSender = makeMavlinkSender "rc_channels_raw_msg" rcChannelsRawMsgId rcChannelsRawCrcExtra

instance MavlinkUnpackableMsg "rc_channels_raw_msg" where
    unpackMsg = ( rcChannelsRawUnpack , rcChannelsRawMsgId )

rcChannelsRawUnpack :: Def ('[ Ref s1 (Struct "rc_channels_raw_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
rcChannelsRawUnpack = proc "mavlink_rc_channels_raw_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

rcChannelsRawWrapper :: WrappedPackRep (Struct "rc_channels_raw_msg")
rcChannelsRawWrapper = wrapPackRep "mavlink_rc_channels_raw" $ packStruct
  [ packLabel time_boot_ms
  , packLabel chan1_raw
  , packLabel chan2_raw
  , packLabel chan3_raw
  , packLabel chan4_raw
  , packLabel chan5_raw
  , packLabel chan6_raw
  , packLabel chan7_raw
  , packLabel chan8_raw
  , packLabel port
  , packLabel rssi
  ]

instance Packable (Struct "rc_channels_raw_msg") where
  packRep = wrappedPackRep rcChannelsRawWrapper
