{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Ivory.Messages.AuthKey where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Ivory.Send
import SMACCMPilot.Mavlink.Ivory.Unpack

authKeyMsgId :: Uint8
authKeyMsgId = 7

authKeyCrcExtra :: Uint8
authKeyCrcExtra = 119

authKeyModule :: Module
authKeyModule = package "mavlink_auth_key_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkAuthKeySender
  incl authKeyUnpack
  defStruct (Proxy :: Proxy "auth_key_msg")
  wrappedPackMod authKeyWrapper

[ivory|
struct auth_key_msg
  { key :: Array 32 (Stored Uint8)
  }
|]

mkAuthKeySender ::
  Def ('[ ConstRef s0 (Struct "auth_key_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkAuthKeySender = makeMavlinkSender "auth_key_msg" authKeyMsgId authKeyCrcExtra

instance MavlinkUnpackableMsg "auth_key_msg" where
    unpackMsg = ( authKeyUnpack , authKeyMsgId )

authKeyUnpack :: Def ('[ Ref s1 (Struct "auth_key_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
authKeyUnpack = proc "mavlink_auth_key_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

authKeyWrapper :: WrappedPackRep (Struct "auth_key_msg")
authKeyWrapper = wrapPackRep "mavlink_auth_key" $ packStruct
  [ packLabel key
  ]

instance Packable (Struct "auth_key_msg") where
  packRep = wrappedPackRep authKeyWrapper
