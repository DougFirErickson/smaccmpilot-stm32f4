{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}

-- Autogenerated Mavlink v1.0 implementation: see smavgen_ivory.py

module SMACCMPilot.Mavlink.Messages.ScaledImu where

import Ivory.Language
import Ivory.Serialize
import SMACCMPilot.Mavlink.Send
import SMACCMPilot.Mavlink.Unpack

scaledImuMsgId :: Uint8
scaledImuMsgId = 26

scaledImuCrcExtra :: Uint8
scaledImuCrcExtra = 170

scaledImuModule :: Module
scaledImuModule = package "mavlink_scaled_imu_msg" $ do
  depend serializeModule
  depend mavlinkSendModule
  incl mkScaledImuSender
  incl scaledImuUnpack
  defStruct (Proxy :: Proxy "scaled_imu_msg")
  wrappedPackMod scaledImuWrapper

[ivory|
struct scaled_imu_msg
  { time_boot_ms :: Stored Uint32
  ; xacc :: Stored Sint16
  ; yacc :: Stored Sint16
  ; zacc :: Stored Sint16
  ; xgyro :: Stored Sint16
  ; ygyro :: Stored Sint16
  ; zgyro :: Stored Sint16
  ; xmag :: Stored Sint16
  ; ymag :: Stored Sint16
  ; zmag :: Stored Sint16
  }
|]

mkScaledImuSender ::
  Def ('[ ConstRef s0 (Struct "scaled_imu_msg")
        , Ref s1 (Stored Uint8) -- seqNum
        , Ref s1 (Struct "mavlinkPacket") -- tx buffer/length
        ] :-> ())
mkScaledImuSender = makeMavlinkSender "scaled_imu_msg" scaledImuMsgId scaledImuCrcExtra

instance MavlinkUnpackableMsg "scaled_imu_msg" where
    unpackMsg = ( scaledImuUnpack , scaledImuMsgId )

scaledImuUnpack :: Def ('[ Ref s1 (Struct "scaled_imu_msg")
                             , ConstRef s2 (CArray (Stored Uint8))
                             ] :-> () )
scaledImuUnpack = proc "mavlink_scaled_imu_unpack" $ \ msg buf -> body $ packGet packRep buf 0 msg

scaledImuWrapper :: WrappedPackRep (Struct "scaled_imu_msg")
scaledImuWrapper = wrapPackRep "mavlink_scaled_imu" $ packStruct
  [ packLabel time_boot_ms
  , packLabel xacc
  , packLabel yacc
  , packLabel zacc
  , packLabel xgyro
  , packLabel ygyro
  , packLabel zgyro
  , packLabel xmag
  , packLabel ymag
  , packLabel zmag
  ]

instance Packable (Struct "scaled_imu_msg") where
  packRep = wrappedPackRep scaledImuWrapper
