
(def-newtype time_micros_t sint64_t)

(def-enum arming_mode_t
  (safe     0)
  (disarmed 1)
  (armed    2))

(def-enum control_source_t
  (ppm 0)
  (gcs 1)
  (nav 2))

(def-enum yaw_mode_t
  (rate    0)
  (heading 1))

(def-enum throttle_mode_t
  (direct 0)
  (auto   1))

(def-struct heartbeat_t
  (time        time_micros_t)
  (arming_mode arming_mode_t))

(def-struct control_law_t
  (arming_mode arming_mode_t)
  (ui_mode     control_source_t)
  (yaw_mode    yaw_mode_t)
  (thr_mode    throttle_mode_t))

(def-struct user_input_t
  (throttle    float_t) -- [-1.0..1.0]
  (roll        float_t) -- [-1.0..1.0]
  (pitch       float_t) -- [-1.0..1.0]
  (yaw         float_t)) -- [-1.0..1.0]

(def-struct user_input_result_t
  (ui          user_input_t)
  (source      control_source_t)
  (time        time_micros_t))

(def-struct pid_config_t
  (p_gain float_t)
  (i_gain float_t)
  (d_gain float_t)
  (i_min  float_t)
  (i_max  float_t))

(def-struct pid_state_t
  (i_state float_t)
  (d_state float_t)
  (d_reset bool_t)
  (p_last  float_t)
  (d_last  float_t))

(def-struct throttle_ui_t
  (sens float_t)
  (dead float_t))

(def-struct alt_control_debug_t
  (alt_est       float_t)
  (alt_rate_est  float_t)
  (thrust        pid_state_t)
  (ui_setp       float_t)
  (ui_rate_setp  float_t)
  (pos           pid_state_t)
  (pos_setp      float_t)
  (pos_rate_setp float_t))

(def-interface vehicle_i ()
  (heartbeat   (stream         heartbeat_t))
  (control_law (attr read      control_law_t))
  (user_input  (attr read      user_input_result_t))

  -- SMACCM specific debugging attributes:
  (alt_control_debug (attr read    alt_control_debug_t)))

(def-interface controllable_vehicle_i (vehicle_i)
  (throttle_position_pid   (attr readwrite pid_config_t))
  (throttle_ui             (attr readwrite throttle_ui_t))
  -- Use to set control law, when safety input permits the GCS to set the
  -- control law:
  (control_law_request (attr readwrite control_law_t))
  -- Use to set user input, when safety input permits the GCS to set the
  -- user input:
  (user_input_request  (attr readwrite user_input_t)))

